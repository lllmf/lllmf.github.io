[{"title":"deep_learning","url":"/2023/03/08/deep-learning/","content":"<h1 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h1><p>深度学习是机器学习的一个子集。</p>\n<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><h3 id=\"2-1-数据操作\"><a href=\"#2-1-数据操作\" class=\"headerlink\" title=\"2.1 数据操作\"></a>2.1 数据操作</h3><h4 id=\"2-1-1-入门\"><a href=\"#2-1-1-入门\" class=\"headerlink\" title=\"2.1.1 入门\"></a>2.1.1 入门</h4><p>n维数组，也称为张量（tensor）。深度学习存储和操作数据的主要接口是张量。它提供了各种功能，包括基本数学运算、广播、索引、切片、内存节省和转换其他Python对象。</p>\n<p>张量表示一个由数值组成的数组，这个数组可能有多个维度。具有一个轴的张量对应数学上的向量（vector）；具有两个轴的张量对应数学上的矩阵（matrix）；具有两个轴以上的张量没有特殊的数学名称。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\">x=torch.arange(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用arange创建一个行向量x。x即tensor([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])</span></span><br><span class=\"line\">x.shape</span><br><span class=\"line\"><span class=\"comment\"># 可以通过张量的shape属性来访问张量（沿每个轴的⻓度）的形状。torch.Size([12])</span></span><br><span class=\"line\">x.numel()</span><br><span class=\"line\"><span class=\"comment\"># 12</span></span><br><span class=\"line\">X = x.reshape(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 要想改变一个张量的形状而不改变元素数量和元素值，可以调用reshape函数。x:</span></span><br><span class=\"line\"><span class=\"comment\"># tensor([[ 0, 1, 2, 3],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [ 4, 5, 6, 7],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [ 8, 9, 10, 11]])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以用x.reshape(-1,4)或x.reshape(3,-1)来取代x.reshape(3,4)</span></span><br><span class=\"line\"></span><br><span class=\"line\">torch.zeros((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">torch.ones((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"comment\"># 创建一个形状为（2,3,4）的张量，其中所有元素都设置为0/1</span></span><br><span class=\"line\">torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建一个形状为（3,4）的张量。其中的每个元素都从均值为0、标准差为1的标准高斯分布（正态分布）中随机采样</span></span><br><span class=\"line\">torch.tensor([[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"comment\"># 可以通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。在这里，最外层的列表对应于轴0，内层的列表对应于轴1。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-运算符\"><a href=\"#2-1-2-运算符\" class=\"headerlink\" title=\"2.1.2 运算符\"></a>2.1.2 运算符</h4><p>按元素（element-wise）运算。</p>\n<p>可以在同一形状的任意两个张量上调用按元素操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.tensor([<span class=\"number\">1.0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>])</span><br><span class=\"line\">y = torch.tensor([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">x + y, x - y, x * y, x / y, x ** y <span class=\"comment\"># **运算符是求幂运算</span></span><br><span class=\"line\">torch.exp(x) <span class=\"comment\"># e的x_i次方</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>多个张量的连结（concatenate）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.arange(<span class=\"number\">12</span>,dtype=torch.float32).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">Y = torch.tensor([[<span class=\"number\">2.0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br><span class=\"line\">torch.cat((X, Y), dim=<span class=\"number\">0</span>), torch.cat((X, Y), dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">结果：</span><br><span class=\"line\">(tensor([[ <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>],</span><br><span class=\"line\">\t\t [ <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>, <span class=\"number\">7.</span>],</span><br><span class=\"line\">\t\t [ <span class=\"number\">8.</span>, <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>],</span><br><span class=\"line\">\t\t [ <span class=\"number\">2.</span>, <span class=\"number\">1.</span>, <span class=\"number\">4.</span>, <span class=\"number\">3.</span>],</span><br><span class=\"line\">\t\t [ <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>],</span><br><span class=\"line\">\t\t [ <span class=\"number\">4.</span>, <span class=\"number\">3.</span>, <span class=\"number\">2.</span>, <span class=\"number\">1.</span>]]),</span><br><span class=\"line\">tensor([[ <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">2.</span>, <span class=\"number\">1.</span>, <span class=\"number\">4.</span>, <span class=\"number\">3.</span>],</span><br><span class=\"line\">\t\t[ <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>, <span class=\"number\">7.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>],</span><br><span class=\"line\">\t\t[ <span class=\"number\">8.</span>, <span class=\"number\">9.</span>, <span class=\"number\">10.</span>, <span class=\"number\">11.</span>, <span class=\"number\">4.</span>, <span class=\"number\">3.</span>, <span class=\"number\">2.</span>, <span class=\"number\">1.</span>]]))</span><br></pre></td></tr></table></figure>\n\n<p>逻辑运算符</p>\n<p>对于每个位置都进行判断。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X==Y</span><br><span class=\"line\"><span class=\"comment\"># tensor([[False, True, False, True],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [False, False, False, False],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [False, False, False, False]])</span></span><br></pre></td></tr></table></figure>\n\n<p>对张量中的所有元素进行求和，会产生一个单元素张量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X.<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"><span class=\"comment\"># tensor(66.)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-3-广播机制（broadcasting-mechanism）\"><a href=\"#2-1-3-广播机制（broadcasting-mechanism）\" class=\"headerlink\" title=\"2.1.3 广播机制（broadcasting mechanism）\"></a>2.1.3 广播机制（broadcasting mechanism）</h4><p>处理不同形状的张量。机制：先通过适当复制元素来扩展一个或两个数组，让两个张量具有相同的形状。再对生成的数组执行按元素操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = torch.arange(<span class=\"number\">3</span>).reshape((<span class=\"number\">3</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = torch.arange(<span class=\"number\">2</span>).reshape((<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">a, b</span><br><span class=\"line\"><span class=\"comment\"># (tensor([[0],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t   [1],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t   [2]]),</span></span><br><span class=\"line\"><span class=\"comment\">#tensor([[0, 1]]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#a,b分别是3*1，1*2的矩阵，形状不匹配。将两个矩阵广播为一个更大的3*2的矩阵：</span></span><br><span class=\"line\">a+b</span><br><span class=\"line\"><span class=\"comment\"># tensor([[0, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [1, 2],</span></span><br><span class=\"line\"><span class=\"comment\">#\t\t  [2, 3]])</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵a将复制列，矩阵b将复制行，然后再按元素相加</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4-索引和切片\"><a href=\"#2-1-4-索引和切片\" class=\"headerlink\" title=\"2.1.4 索引和切片\"></a>2.1.4 索引和切片</h4><p>索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X[-<span class=\"number\">1</span>]</span><br><span class=\"line\">X[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">X[<span class=\"number\">1</span>,<span class=\"number\">2</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">X[<span class=\"number\">0</span>:<span class=\"number\">2</span>, :] = <span class=\"number\">12</span> <span class=\"comment\"># 访问第1行和第2行，其中“:”代表沿轴1（列）的所有元素</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>切片</p>\n<p>可以使用切片表示法将操作的结果分配给先前分配的数组，例如 <code>Y[:] = &lt;expression&gt;</code> 。从而没有新的内存分配。</p>\n<p>如果在后续计算中没有重复使用X，我们也可以使用X[:] &#x3D; X + Y或X +&#x3D; Y来减少操作的内存开销。</p>\n<h4 id=\"2-1-5-转换成其他Python对象\"><a href=\"#2-1-5-转换成其他Python对象\" class=\"headerlink\" title=\"2.1.5 转换成其他Python对象\"></a>2.1.5 转换成其他Python对象</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = X.numpy()</span><br><span class=\"line\">B = torch.tensor(A)</span><br><span class=\"line\"><span class=\"built_in\">type</span>(A), <span class=\"built_in\">type</span>(B)</span><br><span class=\"line\"><span class=\"comment\"># (numpy.ndarray, torch.Tensor)</span></span><br><span class=\"line\"><span class=\"comment\"># torch张量和numpy数组将共享它们的底层内存，就地操作更改一个张量也会同时更改另一个张量。</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = torch.tensor([<span class=\"number\">3.5</span>])</span><br><span class=\"line\">a, a.item(), <span class=\"built_in\">float</span>(a), <span class=\"built_in\">int</span>(a)</span><br><span class=\"line\"><span class=\"comment\"># (tensor([3.5000]), 3.5, 3.5, 3)</span></span><br><span class=\"line\"><span class=\"comment\"># 要将大小为1的张量转换为Python标量，我们可以调用item函数或Python的内置函数。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-数据预处理\"><a href=\"#2-2-数据预处理\" class=\"headerlink\" title=\"2.2 数据预处理\"></a>2.2 数据预处理</h3><p>在Python中常用的数据分析工具中，我们通常使用pandas软件包。</p>\n<h4 id=\"2-2-1-读取数据集\"><a href=\"#2-2-1-读取数据集\" class=\"headerlink\" title=\"2.2.1 读取数据集\"></a>2.2.1 读取数据集</h4><p>首先创建了一个人工数据集，并存储在CSV（逗号分隔值）文件 ..&#x2F;data&#x2F;house_tiny.csv 中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;data&#x27;</span>), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file = os.path.join(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;data&#x27;</span>, <span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NumRooms,Alley,Price\\n&#x27;</span>) <span class=\"comment\"># 列名</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,Pave,127500\\n&#x27;</span>) <span class=\"comment\"># 每行表示一个数据样本</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2,NA,106000\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;4,NA,140000\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,NA,120000\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再从创建的CSV文件中加载原始数据集，我们导入 <code>pandas</code> 包并调用 <code>read_csv</code> 函数。该数据集有四行三列。其中每行描述了房间数量（“NumRooms”）、巷子类型（“Alley”）和房屋价格（“Price”）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">data = pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-处理缺失值\"><a href=\"#2-2-2-处理缺失值\" class=\"headerlink\" title=\"2.2.2 处理缺失值\"></a>2.2.2 处理缺失值</h4><p>“NaN”项代表缺失值。</p>\n<p>为了处理缺失的数据，典型的方法包括插值法和删除法，其中插值法用一个替代值弥补缺失值，而删除法则直接忽略缺失值。在这里，我们将考虑插值法。</p>\n<p>通过位置索引iloc，我们将data分成inputs和outputs，其中前者为data的前两列，而后者为data的最后一列。<br>对于inputs中缺少的数值，我们用同一列的均值替换“NaN”项。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">inputs, outputs = data.iloc[:, <span class=\"number\">0</span>:<span class=\"number\">2</span>], data.iloc[:, <span class=\"number\">2</span>]</span><br><span class=\"line\">inputs = inputs.fillna(inputs.mean())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<p>对于inputs中的类别值或离散值，我们将“NaN”视为一个类别。由于“巷子类型”（“Alley”）列只接受两种类型的类别值“Pave”和“NaN”，pandas可以自动将此列转换为两列“Alley_Pave”和“Alley_nan”。</p>\n<p>巷子类型为“Pave”的行会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。缺少巷子类型的行会将“Alley_Pave”和“Alley_nan”分别设置为0和1。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">inputs = pd.get_dummies(inputs, dummy_na=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-转换为张量格式\"><a href=\"#2-2-3-转换为张量格式\" class=\"headerlink\" title=\"2.2.3 转换为张量格式\"></a>2.2.3 转换为张量格式</h4><p>现在inputs和outputs中的所有条目都是数值类型，它们可以转换为张量格式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class=\"line\">X, y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-线性代数\"><a href=\"#2-3-线性代数\" class=\"headerlink\" title=\"2.3 线性代数\"></a>2.3 线性代数</h3><h4 id=\"2-3-1-标量（scalar）\"><a href=\"#2-3-1-标量（scalar）\" class=\"headerlink\" title=\"2.3.1 标量（scalar）\"></a>2.3.1 标量（scalar）</h4><p>在表达式 <code>x=1+a</code> 中，1是标量值，符号x和a称为变量（variable，表示未知的标量值）。</p>\n<p>标量由只有一个元素的张量表示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">x = torch.tensor(<span class=\"number\">3.0</span>)</span><br><span class=\"line\">y = torch.tensor(<span class=\"number\">2.0</span>)</span><br><span class=\"line\">x + y, x * y, x / y, x**y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-向量（vector）\"><a href=\"#2-3-2-向量（vector）\" class=\"headerlink\" title=\"2.3.2 向量（vector）\"></a>2.3.2 向量（vector）</h4><p>向量可以被视为标量值组成的列表。这些标量值被称为向量的元素（element）或分量（component）。</p>\n<p>人们通过一维张量表示向量。一般来说，张量可以具有任意⻓度，取决于机器的内存限制。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n\n<p>大量文献认为列向量是向量的默认方向。</p>\n<p>通过张量的索引来访问任一元素。如 <code>x[1]</code> 。</p>\n<p>向量的⻓度通常称为向量的维度（dimension），<code>len(x)</code> 。</p>\n<p>当用张量表示一个向量（只有一个轴）时，我们也可以通过.shape属性访问向量的长度。形状（shape）是一<br>个元素组，列出了张量沿每个轴的长度（维数）。对于只有一个轴的张量，形状只有一个元素。<code>x.shape</code> 。</p>\n<h4 id=\"2-3-3-矩阵（matrix）\"><a href=\"#2-3-3-矩阵（matrix）\" class=\"headerlink\" title=\"2.3.3 矩阵（matrix）\"></a>2.3.3 矩阵（matrix）</h4><p>矩阵将向量从一阶推广到二阶。</p>\n<p>矩阵有相同数量的行和列时，称为方阵（square matrix）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当我们交换矩阵的行和列时，结果称为矩阵的转置（transpose）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A.T</span><br></pre></td></tr></table></figure>\n\n<p>定义一个对称矩阵：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">B = torch.tensor([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]])</span><br><span class=\"line\">B == B.T</span><br></pre></td></tr></table></figure>\n\n<p>尽管单个向量的默认方向是列向量，但在表示表格数据集的矩阵中，将每个数据样本作为矩阵中的行向量更为常见。</p>\n","categories":["深度学习"],"tags":["理论"]},{"title":"1.搭建自己的技术博客","url":"/2022/03/07/hello-world/","content":"<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h2><p>mff开始搭建自己的技术博客啦（划掉）。</p>\n<p>搭建内容：github(提供仓库、域名)+hexo(博客搭建工具)+next(一款简洁的hexo主题)，ps: 互动功能，集成Gitalk、集成Valine(评论区)。</p>\n<p>搭建技术博客其实是很多人都在做的事情啦。因此互联网上也有不少帖子对此提供教学。但是由于时效性、电脑配置、使用者对工具的熟悉度等种种问题，还是没有一个比较完备的帖子能让我从头到尾一路搭建起博客来。这就是我在踩坑、横跳多个网页后，决定将《搭建自己的技术博客——指北》作为第一篇文章的原因。</p>\n<p>另外，本人的操作系统是win10 64位，搭建时间是2023年3月。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><h3 id=\"1-在Github-创建博客仓库\"><a href=\"#1-在Github-创建博客仓库\" class=\"headerlink\" title=\"1. 在Github 创建博客仓库\"></a>1. 在Github 创建博客仓库</h3><p>注意：名称必须为<code>&#123;username&#125;.github.io</code>。<code>username</code> 就是你的 GitHub 账户名称。</p>\n<p>可以先创建一个新文件 <code>index.html</code> ，作为网站的主页，然后在博客仓库 -&gt; setting -&gt; Pages看到网址：<code>https://yourname.github.io/</code> ，访问之后可以看到在 <code>index.html</code> 中写的内容。</p>\n<h3 id=\"2-在本机安装Node-js\"><a href=\"#2-在本机安装Node-js\" class=\"headerlink\" title=\"2. 在本机安装Node.js\"></a>2. 在本机安装<a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></h3><p>选择64位的 msi 版本。</p>\n<p>注意选择安装目录（如果跟我一样C盘容量不大的话）。</p>\n<p>安装完毕，在 cmd 窗口输入命令 <code>node -v</code> 和 <code>npm -v</code> 查看版本。</p>\n<p>注意：全局包的下载路径也是默认在C盘，<code>npm root -g</code> 命令查看当前路径。而将其挪到其他目录的方法如下：</p>\n<h4 id=\"修改全局包路径\"><a href=\"#修改全局包路径\" class=\"headerlink\" title=\"修改全局包路径\"></a>修改全局包路径</h4><p>在 nodejs 的安装目录（我的在D盘）下创建两个文件夹，<code>node_global</code> 全局包存放，<code>node_cache</code> node缓存。</p>\n<p>在 cmd 执行下面两条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">&quot;...\\...\\nodejs\\node_global&quot;</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">&quot;...\\...\\nodejs\\node_cache&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改环境变量\"><a href=\"#修改环境变量\" class=\"headerlink\" title=\"修改环境变量\"></a>修改环境变量</h4><p>上面的步骤系统并不知道，所以要修改环境变量。设置 -&gt; 高级设置 -&gt; 属性 -&gt; 查看高级系统设置 -&gt; 环境变量(N) 。</p>\n<ul>\n<li>在上面的框框——用户变量(U)中，Path新增 <code>node_global</code> 的路径： <code>...\\...\\nodejs\\node_global</code></li>\n<li>在下面的框框——系统变量(S)中，直接新增系统变量，变量名： <code>NODE_PATH</code> ，变量值：<code>...\\...\\nodejs\\node_global\\node_modules</code></li>\n</ul>\n<h3 id=\"3-在本机安装Git\"><a href=\"#3-在本机安装Git\" class=\"headerlink\" title=\"3. 在本机安装Git\"></a>3. 在本机安装<a href=\"https://git-scm.com/downloads\">Git</a></h3><p>下载安装完后，鼠标右键就会看到新增 <code>Git GUI Here</code> 和 <code>Git Bash Here</code> 。点击进入窗口后，字体和大小可能不合适。可以右键 -&gt; Options -&gt; Text -&gt; Select… -&gt; 调整字体及大小 -&gt; 确定。</p>\n<h2 id=\"2-Hexo\"><a href=\"#2-Hexo\" class=\"headerlink\" title=\"2. Hexo\"></a>2. Hexo</h2><p>官方的说法：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"2-1-安装Hexo\"><a href=\"#2-1-安装Hexo\" class=\"headerlink\" title=\"2.1 安装Hexo\"></a>2.1 安装Hexo</h3><p>通过 npm 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里的 <code>-g</code> 选项是让包安装到我们之前修改的位置，即 <code>...\\nodejs\\node_global\\node_modules\\hexo-cli</code>。但是这个时候你可以查看一下 <code>C:\\Users\\yourname\\AppData\\Roaming\\npm</code>目录下是否有该安装包。如果发现居然还是安装在了C盘，那么可以试试我找到的方法：</p>\n<ul>\n<li><p>进入nodejs安装目录下 <code>...\\nodejs\\node_modules\\npm</code> ，打开<code>.npmrc</code> 文件，输入下面的两行内容：（<code>...</code> 部分填入你的具体地址）</p>\n</li>\n<li><p>&#96;&#96;&#96;<br>prefix&#x3D;…\\nodejs\\node_global<br>cache&#x3D;…\\nodejs\\node_cache</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 2.2 创建项目</span><br><span class=\"line\"></span><br><span class=\"line\">先将 cmd 当前目录切换到你要创建项目的目录下面（通过命令 `cd` + `要切换到的目录` ，从C盘切换D盘直接输命令 `D:`）。</span><br><span class=\"line\"></span><br><span class=\"line\">创建项目（比如，名为 hexo-blog ）:</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">hexo init hexo-blog</span><br><span class=\"line\">cd hexo-blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>本地启动项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>http://localhost:4000</code> ，看到默认页面。</p>\n<p>注意：启动项目这里，cmd 窗口中会显示按 <code>ctrl+C</code> 可以中断 <code>hexo s</code> 。但是我实际尝试中发现无法中断进程，我找到的方法是：新打开一个 cmd 窗口，输入 <code>taskkill /F /IM node.exe</code> 命令并运行。然后你会发现进程已经中断或者再次按 <code>ctrl+C</code> 成功中断。</p>\n<h3 id=\"2-3-NexT-主题\"><a href=\"#2-3-NexT-主题\" class=\"headerlink\" title=\"2.3 NexT 主题\"></a>2.3 NexT 主题</h3><p>我有考虑要不要把 NexT 部分跟 Hexo 部分并列安排，但前者是后者的主题之一，嵌入的结构可能更合适。</p>\n<h4 id=\"2-3-1-安装并使用主题\"><a href=\"#2-3-1-安装并使用主题\" class=\"headerlink\" title=\"2.3.1 安装并使用主题\"></a>2.3.1 安装并使用主题</h4><p>在项目根目录下，运行安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes / next</span><br></pre></td></tr></table></figure>\n\n<p>然后在目录 <code>...\\hexo-blog\\themes</code> 下可以看到增加了 next 文件夹。</p>\n<p>提前明确一个东西：站点配置文件是指项目根目录下的 <code>_config.yml</code> 文件。主题配置文件是next文件夹下的 <code>_config.yml</code> 文件。</p>\n<p>为了让 hexo 项目启用 next 主题，修改站点配置文件（注意这里是 <code>theme</code> 而不是 <code>themes</code>，<code>next</code> 前要有一个空格符）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，站点可以指定语言：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure>\n\n<p>在next主题下有四种排版方式，修改整体配置文件（只能选一个scheme，其他注释掉）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Pisces</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-创建页、标签等界面\"><a href=\"#2-3-2-创建页、标签等界面\" class=\"headerlink\" title=\"2.3.2 创建页、标签等界面\"></a>2.3.2 创建页、标签等界面</h4><p>偷偷懒啦…</p>\n<p><a href=\"https://tding.top/archives/42c38b10.html\">Hexo-NexT (v7.0+) 主题配置 | 小丁的个人博客 (tding.top)</a></p>\n<p>这个博主讲的好清楚~</p>\n<p>不是每个功能都要配置，按需取用就可以了。</p>\n<p>这里介绍最基础的几个功能：</p>\n<ul>\n<li>创建一个页：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑目录 <code>\\source\\about\\index.md</code> ，我的内容如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: about</span><br><span class=\"line\">date: 2023-03-08 12:12:44 </span><br><span class=\"line\">layout: about</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建文章：</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/yaorongke/article/details/119089190\">https://blog.csdn.net/yaorongke/article/details/119089190</a></p>\n<p>再启动查看 <code>http://localhost:4000</code> 界面情况。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附页\"><a href=\"#附页\" class=\"headerlink\" title=\"附页\"></a>附页</h4><h5 id=\"一些命令解释：\"><a href=\"#一些命令解释：\" class=\"headerlink\" title=\"一些命令解释：\"></a>一些命令解释：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog <span class=\"comment\"># 创建Hexo工程</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;file_name&quot;</span> <span class=\"comment\"># 在post下创建文件</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹。</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成静态文件。使用Hexo引擎将Markdown格式的文件解析成可以使用浏览器查看的HTML文件，HTML文件存储在blog/public目录下。</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># Hexo会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将本地数据部署到远端服务器(如github)</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"一些踩坑记录：\"><a href=\"#一些踩坑记录：\" class=\"headerlink\" title=\"一些踩坑记录：\"></a>一些踩坑记录：</h5><p><code>hexo d</code> 有报错：</p>\n<p>试试输命令 <code>ipconfig/flushdns</code> ，刷新 DNS 解析缓存。</p>\n<p>如果在终端执行git clone时提示 <code>Failed to connect to github.com port 443:Connection regused</code> 错误：</p>\n<p>找到的解决方案：</p>\n<p>本地有连接<a href=\"https://so.csdn.net/so/search?q=vpn&spm=1001.2101.3001.7020\">vpn</a>，在终端输入命令：<code>git config --global http.proxy http://127.0.0.1:7890</code> 。(说明：7890为本地混合配置的端口号)</p>\n<h5 id=\"一些有趣的优化：\"><a href=\"#一些有趣的优化：\" class=\"headerlink\" title=\"一些有趣的优化：\"></a>一些有趣的优化：</h5><p>首先是最明显的头像：在<code>themes\\next\\_config.yml</code> 文件中，<code>avatar</code> 的url填入头像图片的相对路径。</p>\n<p>让模板支持目录：<code>themes\\next\\source\\css\\_common\\outline\\sidebar\\sidebar-toc.styl</code> 部分的修改如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.nav-child &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-添加互动——评论区\"><a href=\"#3-添加互动——评论区\" class=\"headerlink\" title=\"3. 添加互动——评论区\"></a>3. 添加互动——评论区</h3><h4 id=\"3-1-集成Gitalk\"><a href=\"#3-1-集成Gitalk\" class=\"headerlink\" title=\"3.1 集成Gitalk\"></a>3.1 集成Gitalk</h4><p>主要参考的是这个<a href=\"https://www.toimc.com/hexo-usage-3/\">hexo主题next中gitalk配置与评论初始化</a>。作者直接写</p>\n<p>注意：1. 注册OAuth application时，Homepage URL和Authorization callback URL都填 <code>https://yourname.github.io</code> 。2. <code>talk-auto-init.js</code> 文件中的配置信息改成自己的信息。</p>\n<p>我遇到的问题是 gitalk模块可以正常渲染，但是用户登录会报错：Error: Network Error。</p>\n<p>原因：github官方API，可能会限制调用。</p>\n<p>找到的解决方法：在 <code>...\\themes\\next\\_config.yml</code>文件里， gitalk 的 proxy 如果是 <code>https://github.com/login/oauth/access_token</code> ，则改为 <code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code> 。</p>\n<h4 id=\"3-2-集成Valine\"><a href=\"#3-2-集成Valine\" class=\"headerlink\" title=\"3.2 集成Valine\"></a>3.2 集成Valine</h4><p>主要参考：</p>\n<p><a href=\"https://juejin.cn/post/6929775469243924488\">https://juejin.cn/post/6929775469243924488</a></p>\n<p><a href=\"https://www.jianshu.com/p/b9e73c881729\">https://www.jianshu.com/p/b9e73c881729</a></p>\n","categories":["技术博客"],"tags":["技术"]}]