<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>组件库盘点</title>
    <url>/2023/03/17/Component-Library/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>本篇将简要盘点一些使用过或者感兴趣的 UI 组件库，包括Ant Design，Element Plus，Semi Design，WeUI。希望能独立辨析它们各自的风格和优势，可能也会学习一下实现代码，相当于是一篇学习记录和使用笔记~</p>
<p>另外，各组件库的技术文档就是用各自的组件搭建的，所以我感觉参观组件库的最简单方法其实就是看它们技术文档。</p>
<span id="more"></span>

<h2 id="1-Ant-Design"><a href="#1-Ant-Design" class="headerlink" title="1. Ant Design"></a>1. Ant Design</h2><p>Ant Design（以下简称Antd）是蚂蚁集团体验技术部采用 React 封装的一套组件库。所以官方实现的是适用于 React的，不过社区也实现了 Angular、Vue等版本。</p>
<p>实践例子：蚂蚁金融科技，语雀</p>
<p>Antd 的技术文档很适合中文读者，但是可能是放入的内容比较多，切换页面时加载画面需要时间有点长。数据可视化方面，可以结合使用 AntV &#x2F; G2Plot 库（有机会使用一下）。</p>
<p>Antd 给我的直观感受是 主要通过背景色块区分不同元素块，所以不太有棱角感和分界感，也给界面更多空余感，相对来说视觉上比较舒适。顶部或侧边导航可能是深色，但是位置在整个画面的边缘，占比适当就不会突兀。</p>
<p>展示的组件基本上都是简约的风格，有一种让组件只表达自身功能而尽量节省其他装饰性作用的感觉。图标也是“尽量不说废话”的组件风格，但是相对其他组件而言会活泼一点。</p>
<p>Antd 一些特有的功能组件：</p>
<p>QRCode二维码：能够将文本转换生成二维码的组件，支持自定义配色和 Logo 配置，自 <a href="mailto:&#97;&#x6e;&#x74;&#x64;&#64;&#53;&#x2e;&#x31;&#x2e;&#x30;">&#97;&#x6e;&#x74;&#x64;&#64;&#53;&#x2e;&#x31;&#x2e;&#x30;</a> 版本开始提供该组件。</p>
<p>FloatButton悬浮按钮：用于网站上的全局功能，无论浏览到何处都可以看见的按钮。</p>
<p>Watermark水印：给页面的某个区域加上水印，适用于防止信息盗用。</p>
<h2 id="2-Element-Plus"><a href="#2-Element-Plus" class="headerlink" title="2. Element Plus"></a>2. Element Plus</h2><p>ELement Plus的首页很吸引我——随鼠标移动的界面展示图，很有立体感。这种感觉也体现在其组件里，设计者大概是细节控，边框圆角和投影的样式都有给用户设置可选项。</p>
<p>整体上也是尽量留白让画面显得干净，但是颜色都是较为明亮。个人感觉它相较于 Atnd 更喜欢铺满底色的框框。</p>
<p>Button样式比较可爱（很像糖果）。可以自定义按钮颜色，并自动计算 <code>hover</code> 和 <code>active</code> 触发后的颜色。</p>
<p>Scrollbar用于替换浏览器原生滚动条。</p>
<p>基本上应该有的组件都有，上手应该也比较容易。商务性质没有 Antd 那么明显，功能上会少一点，简约可用。</p>
<h2 id="3-WeUI"><a href="#3-WeUI" class="headerlink" title="3. WeUI"></a>3. WeUI</h2><p>这是一套基于样式库<a href="https://github.com/Tencent/weui-wxss/">weui-wxss</a>开发的小程序扩展组件库，同微信原生视觉体验一致的UI组件库。官方把文档的展示分成两个部分了——查看组件样式：<a href="https://weui.io/%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%EF%BC%9Ahttps://wechat-miniprogram.github.io/weui/docs/%E3%80%82">https://weui.io/，代码示例：https://wechat-miniprogram.github.io/weui/docs/。</a></p>
<blockquote>
<p>“微信内部已经有一套H5版本的WeUI样式库。综合考虑，我们基于WeUI样式库开发了小程序版本的UI组件库，在内部多个小程序项目已经使用OK的情况下，我们把这套组件库开源让外部开发者也可以使用。”</p>
</blockquote>
<p>可以看到，WeUI的定位是给小程序使用的UI模板。这里就要了解一下小程序是什么了~</p>
<blockquote>
<p>微信是中国使用量最大的手机 App 之一，2017年，微信正式推出了小程序，允许外部开发者在微信内部运行自己的代码，开展业务。小程序已经成为国内前端的一个重要业务，跟 Web 和手机 App 有着同等的重要性。</p>
</blockquote>
<p>小程序的优势是无需下载安装、即可使用，但是必须依赖一个平台级应用；开发维护成本低、开发效率高，但是无法承载大应用。</p>
<p>学习资料：</p>
<p><a href="https://wechat-miniprogram.github.io/weui/docs/#weui%E7%BB%84%E4%BB%B6%E5%BA%93%E7%AE%80%E4%BB%8B">https://wechat-miniprogram.github.io/weui/docs/#weui%E7%BB%84%E4%BB%B6%E5%BA%93%E7%AE%80%E4%BB%8B</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html</a></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>React vs Vue</title>
    <url>/2023/03/10/React-vs-Vue/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>在之前做过的项目里，我采用的前端框架都是 React，但是当我在使用中搜索一些方法或者函数问题的时候，发现会出现很多 Vue 的帖子。这让我发现两者可能有很多相似点。</p>
<p>本篇将横向比较两者的异同，主要目的是分析它们的受众。（适合初学者阅读，但不是指导性教程。）</p>
<span id="more"></span>

<h2 id="1-前端框架"><a href="#1-前端框架" class="headerlink" title="1. 前端框架"></a>1. 前端框架</h2><p>首先，我们要理解一个概念：前端框架。在前端开发的时候，我们需要使用HTML来对网页进行基本布局，使用CSS对网页样式进行修饰，使用JavaScript让网页实现互动化功能。所以呢，当你想要自主实现一个较为完善的网页时，你首先要学会这三种语言的用法（特别是能实现很多功能的JS）。不过我觉得一边实践一边学习是一个很好的方法，毕竟前端某种意义上也是所见即所得嘛。</p>
<p>但是从零开始搭建一个美观的网页，对于熟手来说比较枯燥费力，对于新手来说则是难以轻易上手。如果将对很多类似问题的思考迁移过来，我们就会隐约感觉到前面那句话的解决方法——标准化。</p>
<p>前端框架就是为Web开发人员提供可重用代码模块、标准化前端技术，从而提供通用结构和简化工作的工具。而对于新手来说，学习怎么使用这个工具可能是和学习语言一样重要的事情。</p>
<p>前端框架主要用于组织网站应用程序的开发、功能以及交互性。前端框架一般都会自带很多开发工具，其中我比较感兴趣的部分应该会在之后的章节介绍。</p>
<h2 id="2-框架介绍"><a href="#2-框架介绍" class="headerlink" title="2. 框架介绍"></a>2. 框架介绍</h2><p>此小节参考维基百科。</p>
<p>目前最流行的前端框架是 React、Vue、Angular、Svelte、JQuery、Ember、Backbone、Semantic UI、Foundation 和 Preact。本文仅涉及前两者，如果我后面有尝试新的框架，也会考虑再写几篇来介绍。</p>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React 也称为 React.js 或 ReactJS ，由<a href="https://zh.wikipedia.org/zh-cn/Meta_Platforms">Meta</a>（前身为<a href="https://zh.wikipedia.org/wiki/Facebook">Facebook</a>）和由个人开发者和公司组成的社群维护，是一个自由及开放源代码的前端 JavaScript 工具库，用于基于 UI 组件构建用户界面。</p>
<p>React只专注状态管理和将状态渲染到DOM（文档对象模型，用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点 (node)，每个节点都包含着对象 (objects)），因此创建React应用程序通常需要使用额外的工具库来进行路由实现，以及某些客户端功能。</p>
<p>React代码由称为<strong>组件</strong>的实体组成。这些组件是可重复利用的，并且必须遵循大写驼峰命名法（Pascal Case）作为其命名规则，也就是大写版本的驼峰式命名法（camelCase）在src文件夹中形成。</p>
<p>其中，根据宣告组件的方式可以分为两类：函数组件，类别组件。下面是两个例子：</p>
<ul>
<li>函数组件，用一个函数声明，返回 JSX（是JavaScript语言语法的扩展）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* A example */</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">const Example = () =&gt; &#123; /* 定义一个名为Example的React组件 */</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;hello_world&quot;&gt;</span><br><span class="line">            &lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">export default Example; /*将这个组件暴露出来，可以被其他文件引用*/</span><br></pre></td></tr></table></figure>

<ul>
<li>类别组件，使用ES6（ECMAScript 6，于2015年6月正式发布的JavaScript语言的标准）类声明，组件内容关于类别的使用和生命周期方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* A example */</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">class ParentComponent extends React.Component &#123;</span><br><span class="line">  state = &#123; color: &#x27;green&#x27; &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ChildComponent color=&#123;this.state.color&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue 也称为 Vue.js，是一个用于创建用户界面的开源<a href="https://zh.wikipedia.org/wiki/MVVM">MVVM</a>前端的JavaScript 框架，也是一个创建单页应用的Web应用框架。Vue.js 由<a href="https://zh.wikipedia.org/wiki/%E5%B0%A4%E9%9B%A8%E6%BA%AA">尤雨溪</a>创建，由他和其他活跃的核心团队成员维护。（Vue 是 Github 上最受欢迎的开源项目之一。）</p>
<ul>
<li>组件，组件是基础HTML元素的拓展，可方便地自定义其数据与行为</li>
<li>Vue 支持以<code>.vue</code>为扩展名的文件来定义一个完整组件，用以替代使用<code>Vue.component</code>注册组件的方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;我被点击了 &#123;&#123; count &#125;&#125; 次！&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>响应式设计</li>
</ul>
<p>响应式指 MVC 模型中的视图随着模型变化而变化。在 Vue 中，开发者只需将视图与对应的模型进行绑定，Vue 便能自动观测模型的变动，并重绘视图。这一特性使得 Vue 的状态管理变得相当简单直观。</p>
<h2 id="3-定位和建议"><a href="#3-定位和建议" class="headerlink" title="3. 定位和建议"></a>3. 定位和建议</h2><p>如果我是个熟手，那么写这篇文章应该会有更加充实、深入的内容吧。但可能也正因为我不太熟练，所以可以在更合适的位置代表很多人去大胆探索。</p>
<p>对于学习一样工具，方法是很重要的。比如，当我第一次使用React 去开发网页时，因为急于实现脑子里设想的功能，总是想到一点就去搜一点。别人传到网上的资源确实不少，但是我发现有一个很大的问题是 React 会更新但很多博客不会。所以，我们最好从官方网页和社区入手，不用那么急地越过官方教程，也建议在找寻方法的时候回归源码去看看（这里就是开源项目的优点了）。</p>
<p>当然，如果有人愿意带着你上手，应该是会容易很多。但是很多时候自学才是常态，而且在互联网上搜索到合适的指南同样会让学习变得容易很多。</p>
<h2 id="4-沉浸式体验"><a href="#4-沉浸式体验" class="headerlink" title="4. 沉浸式体验"></a>4. 沉浸式体验</h2><p>我们用实践的方式来了解它们。</p>
<h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a><a href="https://cn.vuejs.org/">Vue</a></h3><h4 id="01-准备"><a href="#01-准备" class="headerlink" title="01. 准备"></a>01. 准备</h4><p>当前版本是 Vue3 （Vue 2 将于 2023 年 12 月 31 日停止维护）。</p>
<p>我们首先来看看<a href="https://cn.vuejs.org/guide/introduction.html">官方的深度指南</a>，对 Vue 有一个宏观的了解。Vue 是一个渐进式框架（我的理解是，可以根据自己的需求，在不同场合去使用它完成丰富的内容）。</p>
<ul>
<li><p>单文件组件（ <code>*.vue</code> 文件）</p>
<ul>
<li>将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里</li>
</ul>
</li>
<li><p>组件书写风格</p>
<ul>
<li>选项式 API，用包含多个选项的对象来描述组件的逻辑</li>
<li>组合式 API，使用导入的 API 函数来描述组件逻辑</li>
</ul>
</li>
<li><p>响应式系统</p>
<ul>
<li>Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</li>
</ul>
</li>
</ul>
<h4 id="02-搭建"><a href="#02-搭建" class="headerlink" title="02. 搭建"></a>02. 搭建</h4><p>我已经安装过了 Node.js，版本为 v18.14.2。在命令行输入下面的命令，安装并执行 create-vue（ Vue 官方的项目脚手架工具）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>

<p>选择的可选选项：</p>
<ul>
<li>TypeScript</li>
<li>Vue Router</li>
<li>Pinia</li>
<li>Vitest</li>
</ul>
<p>按引领完成项目创建后，在项目根目录执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>构建工具 <a href="https://cn.vitejs.dev/">Vite</a> 在上面的步骤默认安装好了。</p>
<p>采用官方推荐的 IDE 配置：Visual Studio Code + Volar 扩展。</p>
<p>ps: 上面的命令<code>npm run dev</code>意思是在开发环境运行，如果想在生产环境运行输入<code>npm run build</code>。（开发环境有提示体验的功能，产生性能开销。所以当部署到生产环境中时，应该移除所有未使用的、仅用于开发环境的代码分支，来获得更小的包体积和更好的性能。）</p>
<p>ps： <code>bash: vue: command not found</code> 的问题，原因是不是全局安装vue。</p>
<h4 id="03-组件库"><a href="#03-组件库" class="headerlink" title="03. 组件库"></a>03. 组件库</h4><p>注意 Vue3 项目使用新版的 Element Plus（Vue2 对应的是Element UI）。在项目根目录输入下面的指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<p>如果对打包后文件的大小不在乎，可以使用<strong>完整导入</strong>。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但我觉得<strong>按需导入</strong>可能更好：</p>
<p>首先，需要安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure>

<p>然后把下列代码插入到你的 <code>Vite</code> 的配置文件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ps：安装Vue Router</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<h4 id="04-立项"><a href="#04-立项" class="headerlink" title="04. 立项"></a>04. 立项</h4><p>既然决定通过实践了解 Vue，那我就要选定一个项目内容了。我第一次接触前端知识的大气污染可视化项目，主要是通过在HTML页面中使用 jQuery 库实现数据渲染等，没有使用前端框架。于是这次我准备在 Vue 框架下，重新实现之前做的这个项目，最终可能会对界面效果进行比较分析。</p>
<h4 id="05-上手"><a href="#05-上手" class="headerlink" title="05. 上手"></a>05. 上手</h4><p>预期的组件树长这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App (root component)</span><br><span class="line">|- Visualization</span><br><span class="line">	|- InputTime</span><br><span class="line">	|- Charts</span><br><span class="line">	|- MyBar</span><br></pre></td></tr></table></figure>

<p>多个视图所使用的状态数据是一致的，所以需要在多个组件实例间共享，因此选择用 <code>reactive()</code> 来创建一个响应式对象，并将它导入到多个组件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>——以下为完成代码后的文字记录：</p>
<p>实际上组件结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App (root component)</span><br><span class="line">|- assets</span><br><span class="line">	|- datas</span><br><span class="line">	|- css文件</span><br><span class="line">	|- images</span><br><span class="line">|- components</span><br><span class="line">	|- header.vue //头部组件</span><br><span class="line">	|- sidebar	//侧边栏组件</span><br><span class="line">|- router //管理路由</span><br><span class="line">|- stores</span><br><span class="line">	|- 储存可视化数据文件、侧边栏数据文件</span><br><span class="line">|- views</span><br><span class="line">	|- dashboard.vue //系统主页</span><br><span class="line">	|- 各种图表视图</span><br><span class="line">	|- 引入地图</span><br></pre></td></tr></table></figure>

<p>我重新创建了一个TS版本的 vue 项目，发现比起直接创建的 JS 版本的文件夹，格式会更有条理。</p>
<p>即上文提到的，在创建 vue 项目时选择了以下可选选项：</p>
<ul>
<li>TypeScript</li>
<li>Vue Router</li>
<li>Pinia</li>
<li>Vitest</li>
</ul>
<p>过程中比较麻烦的地方有，高德地图和 ECharts 没有提供 Vue 版本的可参考文件。在 Vue 上面使用它们，在 HTML 网页中使用还是有比较大的区别的。</p>
<p>另外，在探索给 Vue 项目添加暗黑模式，这部分的简单实现：</p>
<p>添加的按钮：</p>
<p>基于 element-plus switch 组件创建了一个暗黑模式开关组件，将它放入横栏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;flex justify-center anhei&quot;&gt;</span><br><span class="line">    &lt;span @click.stop=&quot;toggleDark()&quot;&gt;暗黑模式&lt;/span&gt;</span><br><span class="line">    &lt;el-switch size=&quot;small&quot; v-model=&quot;isDark&quot; style=&quot;--el-switch-on-color: #bde6c9;&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>js部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDark, useToggle &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> isDark = <span class="title function_">useDark</span>()</span><br><span class="line"><span class="keyword">const</span> toggleDark = <span class="title function_">useToggle</span>(isDark)</span><br></pre></td></tr></table></figure>

<p>css部分：</p>
<p>使用到两个滤镜函数：invert()、hue-rotate()。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-class">.dark</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">1</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>invert()</code>：反相，反向输出图像着色。值为 0% 则无变化，值为 0~100% 则是线性乘子效果，值为100%则完全<strong>反转</strong>。</p>
</li>
<li><p><code>hue-rotate()</code>：色相旋转，<strong>减弱图像着色</strong>，处理非黑白的颜色。值为 0 deg 则无变化，值为 0~360 deg 则逐渐减弱，值超过 360 deg 则相当绕 N 圈再计算剩余的值。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>JS vs JSX</title>
    <url>/2023/03/11/JS-vs-JSX/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>写前一篇（前端框架）的时候突然想到，在使用React框架的时候使用的语言是JSX，对于初学者来说可能接受不困难，但是在不熟练JS的情况下直接开始学框架，在语法规范和代码含义上是不是多少有点问题。</p>
<p>反思自己的前端学习经历，似乎就是满足能work的要求但也仅仅是能work的程度了，非常的不专业（敲桌）。这篇主要针对自己知识体系的薄弱点，算是巩固基础以及给自己提个醒叭。</p>
<span id="more"></span>

<h2 id="1-JavaScript"><a href="#1-JavaScript" class="headerlink" title="1. JavaScript"></a>1. JavaScript</h2><p><strong>划重点：原型继承模型，声明，闭包</strong></p>
<p>它跟Java没有什么直接关系，名字源于历史原因。从语言标准的角度叫 ECMAScript 更合适。</p>
<p>JavaScript 是宿主环境（如浏览器、Node.js服务器端环境）下运行的脚本语言，是一种多范式的动态语言（它包含类型、运算符、标准内置（built-in）对象和方法）。</p>
<h3 id="2-1-继承与原型链"><a href="#2-1-继承与原型链" class="headerlink" title="2.1 继承与原型链"></a>2.1 继承与原型链</h3><p>在继承方面，JS只有一种结构，<strong>对象</strong>。每个实例对象（<code>object</code>）都有一个私有属性（<code>__proto__</code>）指向它的构造函数的原型对象（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为<code>null</code>。根据定义，<code>null</code>没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>
<p>Ps: JS 的<code>Object</code>是一种数据类型，用于存储各种键控集合和更复杂的实体。</p>
<h4 id="2-1-1-继承属性"><a href="#2-1-1-继承属性" class="headerlink" title="2.1.1 继承属性"></a>2.1.1 继承属性</h4><p>JS 对象的属性是动态的，当访问一个对象的属性时，会顺着原型链去寻找匹配的属性。但如果要只检查对象是否具有自己定义的属性而不是原型链上的某个属性，则必须使用所有对象从<code>Object.prototype</code> 继承的<code>hasOwnProperty</code>方法。例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title function_">f</span>();</span><br><span class="line"><span class="comment">//上面的代码对应的原型链是:</span></span><br><span class="line"><span class="comment">//&#123;a:1, b:2&#125; --&gt; Object.prototype---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在f函数的原型上定义属性</span></span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">b</span> = <span class="number">3</span>;</span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">c</span> = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//对应的原型链变成了：</span></span><br><span class="line"><span class="comment">//&#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; Object.prototype---&gt; null</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-继承方法"><a href="#2-1-2-继承方法" class="headerlink" title="2.1.2 继承方法"></a>2.1.2 继承方法</h4><p>任何函数都可以添加到对象上作为对象的属性。当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="title function_">m</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 当调用 o.m 时，&#x27;this&#x27; 指向了 o.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(o);</span><br><span class="line"><span class="comment">// p 是一个继承自 o 的对象</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">a</span> = <span class="number">4</span>; <span class="comment">// 创建 p 的自身属性 &#x27;a&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">m</span>()); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 调用 p.m 时，&#x27;this&#x27; 指向了 p</span></span><br><span class="line"><span class="comment">// 又因为 p 继承了 o 的 m 函数</span></span><br><span class="line"><span class="comment">// 所以，此时的 &#x27;this.a&#x27; 即 p.a，就是 p 的自身属性 &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-创建对象"><a href="#2-1-3-创建对象" class="headerlink" title="2.1.3 创建对象"></a>2.1.3 创建对象</h4><p>使用语法结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// o 这个对象继承了 Object.prototype 上面的所有属性</span></span><br><span class="line"><span class="comment">// o 自身没有名为 hasOwnProperty 的属性</span></span><br><span class="line"><span class="comment">// hasOwnProperty 是 Object.prototype 的属性</span></span><br><span class="line"><span class="comment">// 因此 o 继承了 Object.prototype 的 hasOwnProperty</span></span><br><span class="line"><span class="comment">// Object.prototype 的原型为 null</span></span><br><span class="line"><span class="comment">// 原型链如下：</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;yo&quot;</span>, <span class="string">&quot;whadup&quot;</span>, <span class="string">&quot;?&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// (Array.prototype 中包含 indexOf, forEach 等方法)</span></span><br><span class="line"><span class="comment">// 原型链如下：</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数都继承于 Function.prototype</span></span><br><span class="line"><span class="comment">// (Function.prototype 中包含 call, bind 等方法)</span></span><br><span class="line"><span class="comment">// 原型链如下：</span></span><br><span class="line"><span class="comment">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure>

<p>使用构造器：</p>
<p>在 JavaScript 中，构造器其实就是一个普通的函数。当使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new">new 操作符</a> 来作用这个函数时，它就可以被称为构造方法（构造函数）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Graph</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">edges</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Graph</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">addVertex</span>: <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line"><span class="comment">// g 是生成的对象，他的自身属性有 &#x27;vertices&#x27; 和 &#x27;edges&#x27;。</span></span><br><span class="line"><span class="comment">// 在 g 被实例化时，g.[[Prototype]] 指向了 Graph.prototype。</span></span><br></pre></td></tr></table></figure>

<p>使用<code>Object.create</code>:</p>
<p>是ECMAScript 5 中引入的一个新方法。可以调用这个方法来创建一个新对象，新对象的原型就是调用 create 方法时传入的第一个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(a);</span><br><span class="line"><span class="comment">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">a</span>); <span class="comment">// 1 (继承而来)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">Object</span>.<span class="title function_">create</span>(b);</span><br><span class="line"><span class="comment">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// d ---&gt; null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">hasOwnProperty</span>); <span class="comment">// undefined，因为 d 没有继承 Object.prototype</span></span><br></pre></td></tr></table></figure>

<p>使用<code>class</code>关键字创建对象：</p>
<p>ECMAScript6 引入了一套新的关键字用来实现<code>class</code>，新关键字包括<code>class</code>，<code>constructor</code>，<code>static</code>，<code>extends</code>，<code>super</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="comment">//采用严格模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Polygon</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">sideLength</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(sideLength, sideLength);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">area</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">width</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">sideLength</span>(<span class="params">newLength</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = newLength;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = newLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><strong>ps：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行：</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="comment">//实际上JS执行的是：</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">__proto__</span> = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">call</span>(o);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-声明变量"><a href="#2-2-声明变量" class="headerlink" title="2.2 声明变量"></a>2.2 声明变量</h3><p>在 JavaScript 中声明一个新变量的方法是使用关键字 <code>let</code> 、<code>const</code> 和 <code>var</code>：</p>
<p><strong><code>let</code></strong> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</p>
<p><strong><code>const</code></strong> 允许声明一个不可变的常量。这个常量在定义域内总是可见的。</p>
<p><strong><code>var</code></strong> 是最常见的声明变量的关键字。它没有其他两个关键字的种种限制。这是因为它是传统上在 JavaScript 声明变量的唯一方法。使用 <strong><code>var</code></strong> 声明的变量在<strong>它所声明的整个函数</strong>都是可见的。</p>
<p>如果声明了一个变量却没有对其赋值，那么这个变量的类型就是 <code>undefined</code>。</p>
<h3 id="2-3-关键字-this"><a href="#2-3-关键字-this" class="headerlink" title="2.3 关键字 this"></a>2.3 关键字 <code>this</code></h3><p>当使用在函数中时，<code>this</code> 指代当前的对象，也就是调用了函数的对象。如果在一个对象上使用点或者方括号来访问属性或方法，这个对象就成了 <code>this</code>。如果并没有使用“点”运算符调用某个对象，那么 <code>this</code> 将指向全局对象（global object）。这是一个经常出错的地方。例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makePerson</span>(<span class="params">first, last</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">first</span>: first,</span><br><span class="line">        <span class="attr">last</span>: last,</span><br><span class="line">        <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">last</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fullNameReversed</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">last</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">first</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">s = <span class="title function_">makePerson</span>(<span class="string">&quot;Simon&quot;</span>, <span class="string">&quot;Willison&quot;</span>);</span><br><span class="line">s.<span class="title function_">fullName</span>(); <span class="comment">// &quot;Simon Willison&quot;</span></span><br><span class="line">s.<span class="title function_">fullNameReversed</span>(); <span class="comment">// Willison, Simon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullName = s.<span class="property">fullName</span>;</span><br><span class="line"><span class="title function_">fullName</span>(); <span class="comment">// undefined undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-apply-和-call"><a href="#2-4-apply-和-call" class="headerlink" title="2.4 apply 和 call"></a>2.4 <code>apply</code> 和 <code>call</code></h3><p><code>apply()</code> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数，返回值就是调用有指定 <strong><code>this</code></strong> 值和参数的函数的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">apply</span>(thisArg)</span><br><span class="line"><span class="title function_">apply</span>(thisArg, argsArray)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>thisArg</code>: 在 <code>func</code> 函数运行时使用的 <code>this</code> 值。<code>this</code> 可能不是该方法看到的实际值：如果这个函数处于非严格模式，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p>
</li>
<li><p><code>argsArray</code>: 个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <code>null</code> 或 <code>undefined</code>，则表示不需要传入任何参数。</p>
</li>
</ul>
<p><code>call</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。该方法的语法和作用与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是<strong>一个参数列表</strong>，而 <code>apply()</code> 方法接受的是<strong>一个包含多个参数的数组</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>

<h3 id="2-5-闭包"><a href="#2-5-闭包" class="headerlink" title="2.5 闭包"></a>2.5 闭包</h3><p><strong>作用域对象</strong>组成了一个名为作用域链（scope chain）的（调用）链。它和 JavaScript 的对象系统使用的原型（prototype）链相类似。</p>
<p>一个<strong>闭包</strong>，就是一个函数与其被创建时所带有的作用域对象的组合。闭包允许你保存状态——所以，它们可以用来代替对象。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeAdder</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add5 = <span class="title function_">makeAdder</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> add20 = <span class="title function_">makeAdder</span>(<span class="number">20</span>);</span><br><span class="line"><span class="title function_">add5</span>(<span class="number">6</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="title function_">add20</span>(<span class="number">7</span>); <span class="comment">// 27</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当调用 <code>makeAdder</code> 时，解释器创建了一个作用域对象，它带有一个属性：<code>a</code>，这个属性被当作参数传入 <code>makeAdder</code> 函数。然后 <code>makeAdder</code> 返回一个新创建的函数（暂记为 <code>adder</code>）。通常，JavaScript 的垃圾回收器会在这时回收 <code>makeAdder</code> 创建的作用域对象（暂记为 <code>b</code>），但是，<code>makeAdder</code> 的返回值，新函数 <code>adder</code>，拥有一个指向作用域对象 <code>b</code> 的引用。最终，作用域对象 <code>b</code> 不会被垃圾回收器回收，直到没有任何引用指向新函数 <code>adder</code>。</p>
<p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_Overview">MDN Web Docs 社区</a></p>
<h2 id="2-JSX"><a href="#2-JSX" class="headerlink" title="2. JSX"></a>2. JSX</h2><p>这一篇接下来的部分学习JSX（<strong>JavaScript 语法扩展</strong>，有时称为<strong>JavaScript XML</strong>）。<strong>React</strong> 组件一般是用JSX编写，虽然也可以纯JS编写。和React一样，JSX也是Meta创建的。</p>
<!-- more -->

<h3 id="2-1-JSX-语法"><a href="#2-1-JSX-语法" class="headerlink" title="2.1 JSX 语法"></a>2.1 JSX 语法</h3><p>JSX 产生 <strong>React “元素”</strong>。在 JavaScript 代码中使用 UI 时，它作为视觉辅助很有帮助，JSX 还允许 React 显示更有用的错误和警告消息。</p>
<p>例子 + 特性：</p>
<p><code>const element = &lt;h1&gt;Hello, &#123;name&#125;!&lt;/h1&gt;;</code></p>
<ul>
<li>可以将<strong>有效的 JS 表达式</strong>放在<strong>大括号</strong>内</li>
<li><strong>JSX 表达式</strong>本身也可以<strong>作为参数</strong>分配给变量（编译后，JSX 表达式成为常规的 JavaScript 函数调用并评估为 JavaScript 对象）</li>
</ul>
<p><code>const element = &lt;a href=&quot;https://www.reactjs.org&quot;&gt; link &lt;/a&gt;;</code></p>
<ul>
<li>可以使用<strong>引号</strong>将<strong>字符串值</strong>指定为属性</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = response.<span class="property">potentiallyMaliciousInput</span>;</span><br><span class="line"><span class="comment">// This is safe:</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>默认情况下，React DOM在渲染它们之前转义嵌入在 JSX 中的任何值。因此，它确保您永远无法注入任何未明确写入您的应用程序的内容。一切都在呈现之前转换为字符串。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建出来的对象=&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: this structure is simplified</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Babel 将 JSX 编译为 <code>React.createElement()</code> 调用，<code>React.createElement()</code> 会创建一个对象—— React 元素。React 读取这些对象并使用它们构建 DOM 并使其保持最新。</li>
</ul>
<h3 id="2-2-React-元素"><a href="#2-2-React-元素" class="headerlink" title="2.2 React 元素"></a>2.2 React 元素</h3><p>元素是 React 应用程序的最小构建块。与浏览器 DOM 元素不同，React 元素是普通对象，创建起来很便宜。React DOM 负责更新 DOM 以匹配 React 元素。</p>
<p>要渲染 React 元素，首先将 DOM 元素传递给 <code>ReactDOM.createRoot()</code> ，然后将 React 元素传递给<code>root.render()</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">root.<span class="title function_">render</span>(element);</span><br></pre></td></tr></table></figure>

<p>更新 UI 的唯一方法是创建一个新元素，并将其传递给<code>root.render()</code>。大多数 React 应用程序只调用<code>root.render()</code>一次。<code>root.render()</code> 每秒从回调中调用一次 <code>setInterval()</code>。</p>
<p>参考：<a href="https://legacy.reactjs.org/docs/introducing-jsx.html">介绍 JSX</a></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>deep_learning</title>
    <url>/2023/03/08/deep-learning/</url>
    <content><![CDATA[<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>深度学习是机器学习的一个子集。</p>
<span id="more"></span>

<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="2-1-数据操作"><a href="#2-1-数据操作" class="headerlink" title="2.1 数据操作"></a>2.1 数据操作</h3><h4 id="2-1-1-入门"><a href="#2-1-1-入门" class="headerlink" title="2.1.1 入门"></a>2.1.1 入门</h4><p>n维数组，也称为张量（tensor）。深度学习存储和操作数据的主要接口是张量。它提供了各种功能，包括基本数学运算、广播、索引、切片、内存节省和转换其他Python对象。</p>
<p>张量表示一个由数值组成的数组，这个数组可能有多个维度。具有一个轴的张量对应数学上的向量（vector）；具有两个轴的张量对应数学上的矩阵（matrix）；具有两个轴以上的张量没有特殊的数学名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x=torch.arange(<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 使用arange创建一个行向量x。x即tensor([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])</span></span><br><span class="line">x.shape</span><br><span class="line"><span class="comment"># 可以通过张量的shape属性来访问张量（沿每个轴的⻓度）的形状。torch.Size([12])</span></span><br><span class="line">x.numel()</span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line">X = x.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 要想改变一个张量的形状而不改变元素数量和元素值，可以调用reshape函数。x:</span></span><br><span class="line"><span class="comment"># tensor([[ 0, 1, 2, 3],</span></span><br><span class="line"><span class="comment">#		  [ 4, 5, 6, 7],</span></span><br><span class="line"><span class="comment">#		  [ 8, 9, 10, 11]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用x.reshape(-1,4)或x.reshape(3,-1)来取代x.reshape(3,4)</span></span><br><span class="line"></span><br><span class="line">torch.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">torch.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 创建一个形状为（2,3,4）的张量，其中所有元素都设置为0/1</span></span><br><span class="line">torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 创建一个形状为（3,4）的张量。其中的每个元素都从均值为0、标准差为1的标准高斯分布（正态分布）中随机采样</span></span><br><span class="line">torch.tensor([[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 可以通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。在这里，最外层的列表对应于轴0，内层的列表对应于轴1。</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-运算符"><a href="#2-1-2-运算符" class="headerlink" title="2.1.2 运算符"></a>2.1.2 运算符</h4><p>按元素（element-wise）运算。</p>
<p>可以在同一形状的任意两个张量上调用按元素操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">x + y, x - y, x * y, x / y, x ** y <span class="comment"># **运算符是求幂运算</span></span><br><span class="line">torch.exp(x) <span class="comment"># e的x_i次方</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>多个张量的连结（concatenate）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>,dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">torch.cat((X, Y), dim=<span class="number">0</span>), torch.cat((X, Y), dim=<span class="number">1</span>)</span><br><span class="line">结果：</span><br><span class="line">(tensor([[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">		 [ <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>],</span><br><span class="line">		 [ <span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">		 [ <span class="number">2.</span>, <span class="number">1.</span>, <span class="number">4.</span>, <span class="number">3.</span>],</span><br><span class="line">		 [ <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>],</span><br><span class="line">		 [ <span class="number">4.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>]]),</span><br><span class="line">tensor([[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>, <span class="number">4.</span>, <span class="number">3.</span>],</span><br><span class="line">		[ <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>],</span><br><span class="line">		[ <span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>, <span class="number">4.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>]]))</span><br></pre></td></tr></table></figure>

<p>逻辑运算符</p>
<p>对于每个位置都进行判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X==Y</span><br><span class="line"><span class="comment"># tensor([[False, True, False, True],</span></span><br><span class="line"><span class="comment">#		  [False, False, False, False],</span></span><br><span class="line"><span class="comment">#		  [False, False, False, False]])</span></span><br></pre></td></tr></table></figure>

<p>对张量中的所有元素进行求和，会产生一个单元素张量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X.<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># tensor(66.)</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-广播机制（broadcasting-mechanism）"><a href="#2-1-3-广播机制（broadcasting-mechanism）" class="headerlink" title="2.1.3 广播机制（broadcasting mechanism）"></a>2.1.3 广播机制（broadcasting mechanism）</h4><p>处理不同形状的张量。机制：先通过适当复制元素来扩展一个或两个数组，让两个张量具有相同的形状。再对生成的数组执行按元素操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br><span class="line"><span class="comment"># (tensor([[0],</span></span><br><span class="line"><span class="comment">#		   [1],</span></span><br><span class="line"><span class="comment">#		   [2]]),</span></span><br><span class="line"><span class="comment">#tensor([[0, 1]]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a,b分别是3*1，1*2的矩阵，形状不匹配。将两个矩阵广播为一个更大的3*2的矩阵：</span></span><br><span class="line">a+b</span><br><span class="line"><span class="comment"># tensor([[0, 1],</span></span><br><span class="line"><span class="comment">#		  [1, 2],</span></span><br><span class="line"><span class="comment">#		  [2, 3]])</span></span><br><span class="line"><span class="comment"># 矩阵a将复制列，矩阵b将复制行，然后再按元素相加</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-4-索引和切片"><a href="#2-1-4-索引和切片" class="headerlink" title="2.1.4 索引和切片"></a>2.1.4 索引和切片</h4><p>索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X[-<span class="number">1</span>]</span><br><span class="line">X[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">X[<span class="number">1</span>,<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">X[<span class="number">0</span>:<span class="number">2</span>, :] = <span class="number">12</span> <span class="comment"># 访问第1行和第2行，其中“:”代表沿轴1（列）的所有元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切片</p>
<p>可以使用切片表示法将操作的结果分配给先前分配的数组，例如 <code>Y[:] = &lt;expression&gt;</code> 。从而没有新的内存分配。</p>
<p>如果在后续计算中没有重复使用X，我们也可以使用X[:] &#x3D; X + Y或X +&#x3D; Y来减少操作的内存开销。</p>
<h4 id="2-1-5-转换成其他Python对象"><a href="#2-1-5-转换成其他Python对象" class="headerlink" title="2.1.5 转换成其他Python对象"></a>2.1.5 转换成其他Python对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"><span class="built_in">type</span>(A), <span class="built_in">type</span>(B)</span><br><span class="line"><span class="comment"># (numpy.ndarray, torch.Tensor)</span></span><br><span class="line"><span class="comment"># torch张量和numpy数组将共享它们的底层内存，就地操作更改一个张量也会同时更改另一个张量。</span></span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a, a.item(), <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br><span class="line"><span class="comment"># (tensor([3.5000]), 3.5, 3.5, 3)</span></span><br><span class="line"><span class="comment"># 要将大小为1的张量转换为Python标量，我们可以调用item函数或Python的内置函数。</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-数据预处理"><a href="#2-2-数据预处理" class="headerlink" title="2.2 数据预处理"></a>2.2 数据预处理</h3><p>在Python中常用的数据分析工具中，我们通常使用pandas软件包。</p>
<h4 id="2-2-1-读取数据集"><a href="#2-2-1-读取数据集" class="headerlink" title="2.2.1 读取数据集"></a>2.2.1 读取数据集</h4><p>首先创建了一个人工数据集，并存储在CSV（逗号分隔值）文件 ..&#x2F;data&#x2F;house_tiny.csv 中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;data&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRooms,Alley,Price\n&#x27;</span>) <span class="comment"># 列名</span></span><br><span class="line">    f.write(<span class="string">&#x27;NA,Pave,127500\n&#x27;</span>) <span class="comment"># 每行表示一个数据样本</span></span><br><span class="line">    f.write(<span class="string">&#x27;2,NA,106000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;4,NA,140000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;NA,NA,120000\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再从创建的CSV文件中加载原始数据集，我们导入 <code>pandas</code> 包并调用 <code>read_csv</code> 函数。该数据集有四行三列。其中每行描述了房间数量（“NumRooms”）、巷子类型（“Alley”）和房屋价格（“Price”）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-处理缺失值"><a href="#2-2-2-处理缺失值" class="headerlink" title="2.2.2 处理缺失值"></a>2.2.2 处理缺失值</h4><p>“NaN”项代表缺失值。</p>
<p>为了处理缺失的数据，典型的方法包括插值法和删除法，其中插值法用一个替代值弥补缺失值，而删除法则直接忽略缺失值。在这里，我们将考虑插值法。</p>
<p>通过位置索引iloc，我们将data分成inputs和outputs，其中前者为data的前两列，而后者为data的最后一列。<br>对于inputs中缺少的数值，我们用同一列的均值替换“NaN”项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputs, outputs = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>], data.iloc[:, <span class="number">2</span>]</span><br><span class="line">inputs = inputs.fillna(inputs.mean())</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure>

<p>对于inputs中的类别值或离散值，我们将“NaN”视为一个类别。由于“巷子类型”（“Alley”）列只接受两种类型的类别值“Pave”和“NaN”，pandas可以自动将此列转换为两列“Alley_Pave”和“Alley_nan”。</p>
<p>巷子类型为“Pave”的行会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。缺少巷子类型的行会将“Alley_Pave”和“Alley_nan”分别设置为0和1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputs = pd.get_dummies(inputs, dummy_na=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-转换为张量格式"><a href="#2-2-3-转换为张量格式" class="headerlink" title="2.2.3 转换为张量格式"></a>2.2.3 转换为张量格式</h4><p>现在inputs和outputs中的所有条目都是数值类型，它们可以转换为张量格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class="line">X, y</span><br></pre></td></tr></table></figure>

<h3 id="2-3-线性代数"><a href="#2-3-线性代数" class="headerlink" title="2.3 线性代数"></a>2.3 线性代数</h3><h4 id="2-3-1-标量（scalar）"><a href="#2-3-1-标量（scalar）" class="headerlink" title="2.3.1 标量（scalar）"></a>2.3.1 标量（scalar）</h4><p>在表达式 <code>x=1+a</code> 中，1是标量值，符号x和a称为变量（variable，表示未知的标量值）。</p>
<p>标量由只有一个元素的张量表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.tensor(<span class="number">3.0</span>)</span><br><span class="line">y = torch.tensor(<span class="number">2.0</span>)</span><br><span class="line">x + y, x * y, x / y, x**y</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-向量（vector）"><a href="#2-3-2-向量（vector）" class="headerlink" title="2.3.2 向量（vector）"></a>2.3.2 向量（vector）</h4><p>向量可以被视为标量值组成的列表。这些标量值被称为向量的元素（element）或分量（component）。</p>
<p>人们通过一维张量表示向量。一般来说，张量可以具有任意⻓度，取决于机器的内存限制。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure>

<p>大量文献认为列向量是向量的默认方向。</p>
<p>通过张量的索引来访问任一元素。如 <code>x[1]</code> 。</p>
<p>向量的⻓度通常称为向量的维度（dimension），<code>len(x)</code> 。</p>
<p>当用张量表示一个向量（只有一个轴）时，我们也可以通过.shape属性访问向量的长度。形状（shape）是一<br>个元素组，列出了张量沿每个轴的长度（维数）。对于只有一个轴的张量，形状只有一个元素。<code>x.shape</code> 。</p>
<h4 id="2-3-3-矩阵（matrix）"><a href="#2-3-3-矩阵（matrix）" class="headerlink" title="2.3.3 矩阵（matrix）"></a>2.3.3 矩阵（matrix）</h4><p>矩阵将向量从一阶推广到二阶。</p>
<p>矩阵有相同数量的行和列时，称为方阵（square matrix）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>).reshape(<span class="number">5</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>当我们交换矩阵的行和列时，结果称为矩阵的转置（transpose）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.T</span><br></pre></td></tr></table></figure>

<p>定义一个对称矩阵：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">B == B.T</span><br></pre></td></tr></table></figure>

<p>尽管单个向量的默认方向是列向量，但在表示表格数据集的矩阵中，将每个数据样本作为矩阵中的行向量更为常见。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>理论</tag>
      </tags>
  </entry>
  <entry>
    <title>1.搭建自己的技术博客</title>
    <url>/2022/03/07/hello-world/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>mff开始搭建自己的技术博客啦（划掉）。</p>
<p>搭建内容：github(提供仓库、域名)+hexo(博客搭建工具)+next(一款简洁的hexo主题)，ps: 互动功能，集成Gitalk、集成Valine(评论区)。</p>
<span id="more"></span>

<p>搭建技术博客其实是很多人都在做的事情啦。因此互联网上也有不少帖子对此提供教学。但是由于时效性、电脑配置、使用者对工具的熟悉度等种种问题，还是没有一个比较完备的帖子能让我从头到尾一路搭建起博客来。这就是我在踩坑、横跳多个网页后，决定将《搭建自己的技术博客——指北》作为第一篇文章的原因。</p>
<p>另外，本人的操作系统是win10 64位，搭建时间是2023年3月。</p>
<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="1-在Github-创建博客仓库"><a href="#1-在Github-创建博客仓库" class="headerlink" title="1. 在Github 创建博客仓库"></a>1. 在Github 创建博客仓库</h3><p>注意：名称必须为<code>&#123;username&#125;.github.io</code>。<code>username</code> 就是你的 GitHub 账户名称。</p>
<p>可以先创建一个新文件 <code>index.html</code> ，作为网站的主页，然后在博客仓库 -&gt; setting -&gt; Pages看到网址：<code>https://yourname.github.io/</code> ，访问之后可以看到在 <code>index.html</code> 中写的内容。</p>
<h3 id="2-在本机安装Node-js"><a href="#2-在本机安装Node-js" class="headerlink" title="2. 在本机安装Node.js"></a>2. 在本机安装<a href="https://nodejs.org/zh-cn/download/">Node.js</a></h3><p>选择64位的 msi 版本。</p>
<p>注意选择安装目录（如果跟我一样C盘容量不大的话）。</p>
<p>安装完毕，在 cmd 窗口输入命令 <code>node -v</code> 和 <code>npm -v</code> 查看版本。</p>
<p>注意：全局包的下载路径也是默认在C盘，<code>npm root -g</code> 命令查看当前路径。而将其挪到其他目录的方法如下：</p>
<h4 id="修改全局包路径"><a href="#修改全局包路径" class="headerlink" title="修改全局包路径"></a>修改全局包路径</h4><p>在 nodejs 的安装目录（我的在D盘）下创建两个文件夹，<code>node_global</code> 全局包存放，<code>node_cache</code> node缓存。</p>
<p>在 cmd 执行下面两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;...\...\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;...\...\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h4><p>上面的步骤系统并不知道，所以要修改环境变量。设置 -&gt; 高级设置 -&gt; 属性 -&gt; 查看高级系统设置 -&gt; 环境变量(N) 。</p>
<ul>
<li>在上面的框框——用户变量(U)中，Path新增 <code>node_global</code> 的路径： <code>...\...\nodejs\node_global</code></li>
<li>在下面的框框——系统变量(S)中，直接新增系统变量，变量名： <code>NODE_PATH</code> ，变量值：<code>...\...\nodejs\node_global\node_modules</code>；在系统变量的Path中添加 <code>D:\Apps\nodejs\node_global</code> , <code>D:\Apps\nodejs</code></li>
</ul>
<h3 id="3-在本机安装Git"><a href="#3-在本机安装Git" class="headerlink" title="3. 在本机安装Git"></a>3. 在本机安装<a href="https://git-scm.com/downloads">Git</a></h3><p>下载安装完后，鼠标右键就会看到新增 <code>Git GUI Here</code> 和 <code>Git Bash Here</code> 。点击进入窗口后，字体和大小可能不合适。可以右键 -&gt; Options -&gt; Text -&gt; Select… -&gt; 调整字体及大小 -&gt; 确定。</p>
<h2 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h2><p>官方的说法：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="2-1-安装Hexo"><a href="#2-1-安装Hexo" class="headerlink" title="2.1 安装Hexo"></a>2.1 安装Hexo</h3><p>通过 npm 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>注意：这里的 <code>-g</code> 选项是让包安装到我们之前修改的位置，即 <code>...\nodejs\node_global\node_modules\hexo-cli</code>。但是这个时候你可以查看一下 <code>C:\Users\yourname\AppData\Roaming\npm</code>目录下是否有该安装包。如果发现居然还是安装在了C盘，那么可以试试我找到的方法：</p>
<ul>
<li><p>进入nodejs安装目录下 <code>...\nodejs\node_modules\npm</code> ，打开<code>.npmrc</code> 文件，输入下面的两行内容：（<code>...</code> 部分填入你的具体地址）</p>
</li>
<li><p>&#96;&#96;&#96;<br>prefix&#x3D;…\nodejs\node_global<br>cache&#x3D;…\nodejs\node_cache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.2 创建项目</span><br><span class="line"></span><br><span class="line">先将 cmd 当前目录切换到你要创建项目的目录下面（通过命令 `cd` + `要切换到的目录` ，从C盘切换D盘直接输命令 `D:`）。</span><br><span class="line"></span><br><span class="line">创建项目（比如，名为 hexo-blog ）:</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">hexo init hexo-blog</span><br><span class="line">cd hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<p>本地启动项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:4000</code> ，看到默认页面。</p>
<p>注意：启动项目这里，cmd 窗口中会显示按 <code>ctrl+C</code> 可以中断 <code>hexo s</code> 。但是我实际尝试中发现无法中断进程，我找到的方法是：新打开一个 cmd 窗口，输入 <code>taskkill /F /IM node.exe</code> 命令并运行。然后你会发现进程已经中断或者再次按 <code>ctrl+C</code> 成功中断。</p>
<h3 id="2-3-NexT-主题"><a href="#2-3-NexT-主题" class="headerlink" title="2.3 NexT 主题"></a>2.3 NexT 主题</h3><p>我有考虑要不要把 NexT 部分跟 Hexo 部分并列安排，但前者是后者的主题之一，嵌入的结构可能更合适。</p>
<h4 id="2-3-1-安装并使用主题"><a href="#2-3-1-安装并使用主题" class="headerlink" title="2.3.1 安装并使用主题"></a>2.3.1 安装并使用主题</h4><p>在项目根目录下，运行安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes / next</span><br></pre></td></tr></table></figure>

<p>然后在目录 <code>...\hexo-blog\themes</code> 下可以看到增加了 next 文件夹。</p>
<p>提前明确一个东西：站点配置文件是指项目根目录下的 <code>_config.yml</code> 文件。主题配置文件是next文件夹下的 <code>_config.yml</code> 文件。</p>
<p>为了让 hexo 项目启用 next 主题，修改站点配置文件（注意这里是 <code>theme</code> 而不是 <code>themes</code>，<code>next</code> 前要有一个空格符）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>另外，站点可以指定语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<p>在next主题下有四种排版方式，修改整体配置文件（只能选一个scheme，其他注释掉）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment"># scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-创建页、标签等界面"><a href="#2-3-2-创建页、标签等界面" class="headerlink" title="2.3.2 创建页、标签等界面"></a>2.3.2 创建页、标签等界面</h4><p>偷偷懒啦…</p>
<p><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT (v7.0+) 主题配置 | 小丁的个人博客 (tding.top)</a></p>
<p>这个博主讲的好清楚~</p>
<p>不是每个功能都要配置，按需取用就可以了。</p>
<p>这里介绍最基础的几个功能：</p>
<ul>
<li>创建一个页：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>

<p>然后编辑目录 <code>\source\about\index.md</code> ，我的内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: about</span><br><span class="line">date: 2023-03-08 12:12:44 </span><br><span class="line">layout: about</span><br></pre></td></tr></table></figure>

<ul>
<li>创建文章：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;file_name&quot;</span> <span class="comment"># 在post下创建文件</span></span><br></pre></td></tr></table></figure>



<p>再启动查看 <code>http://localhost:4000</code> 界面情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4 id="附页"><a href="#附页" class="headerlink" title="附页"></a>附页</h4><h5 id="一些命令解释："><a href="#一些命令解释：" class="headerlink" title="一些命令解释："></a>一些命令解释：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog <span class="comment"># 创建Hexo工程</span></span><br><span class="line">hexo new <span class="string">&quot;file_name&quot;</span> <span class="comment"># 在post下创建文件</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹。</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态文件。使用Hexo引擎将Markdown格式的文件解析成可以使用浏览器查看的HTML文件，HTML文件存储在blog/public目录下。</span></span><br><span class="line">hexo server <span class="comment"># Hexo会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</span></span><br><span class="line">hexo deploy <span class="comment">#将本地数据部署到远端服务器(如github)</span></span><br></pre></td></tr></table></figure>

<h5 id="一些踩坑记录："><a href="#一些踩坑记录：" class="headerlink" title="一些踩坑记录："></a>一些踩坑记录：</h5><ul>
<li><code>hexo d</code> 有报错：</li>
</ul>
<p>试试输命令 <code>ipconfig/flushdns</code> ，刷新 DNS 解析缓存。</p>
<ul>
<li>如果在终端执行git clone时提示 <code>Failed to connect to github.com port 443:Connection regused</code> 错误：</li>
</ul>
<p>找到的解决方案：</p>
<p>本地有连接<a href="https://so.csdn.net/so/search?q=vpn&spm=1001.2101.3001.7020">vpn</a>，在终端输入命令：<code>git config --global http.proxy http://127.0.0.1:7890</code> 。(说明：7890为本地混合配置的端口号)</p>
<ul>
<li>访问人数的数字没显示</li>
</ul>
<p>在主题配置文件下找到<code>busuanzi_count</code>，<code>enable</code>属性修改为<code>true</code>。</p>
<ul>
<li>文章目录导航失效</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/2066004">Next -25- 中文目录单击不跳转问题解决方案 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<h5 id="一些有趣的优化："><a href="#一些有趣的优化：" class="headerlink" title="一些有趣的优化："></a>一些有趣的优化：</h5><p>首先是最明显的头像：在<code>themes\next\_config.yml</code> 文件中，<code>avatar</code> 的url填入头像图片的相对路径。</p>
<p>让模板支持目录：<code>themes\next\source\css\_common\outline\sidebar\sidebar-toc.styl</code> 部分的修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.nav-child &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-添加互动——评论区"><a href="#3-添加互动——评论区" class="headerlink" title="3. 添加互动——评论区"></a>3. 添加互动——评论区</h3><h4 id="3-1-集成Gitalk"><a href="#3-1-集成Gitalk" class="headerlink" title="3.1 集成Gitalk"></a>3.1 集成Gitalk</h4><p>主要参考的是这个<a href="https://www.toimc.com/hexo-usage-3/">hexo主题next中gitalk配置与评论初始化</a>。作者直接写</p>
<p>注意：1. 注册OAuth application时，Homepage URL和Authorization callback URL都填 <code>https://yourname.github.io</code> 。2. <code>talk-auto-init.js</code> 文件中的配置信息改成自己的信息。</p>
<p>我遇到的问题是 gitalk模块可以正常渲染，但是用户登录会报错：Error: Network Error。</p>
<p>原因：github官方API，可能会限制调用。</p>
<p>找到的解决方法：在 <code>...\themes\next\_config.yml</code>文件里， gitalk 的 proxy 如果是 <code>https://github.com/login/oauth/access_token</code> ，则改为 <code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code> 。</p>
<h4 id="3-2-集成Valine"><a href="#3-2-集成Valine" class="headerlink" title="3.2 集成Valine"></a>3.2 集成Valine</h4><p>主要参考：</p>
<p><a href="https://juejin.cn/post/6929775469243924488">https://juejin.cn/post/6929775469243924488</a></p>
<p><a href="https://www.jianshu.com/p/b9e73c881729">https://www.jianshu.com/p/b9e73c881729</a></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全知识</title>
    <url>/2023/05/05/web-security/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>本篇内容是对前端web安全知识的学习，了解常遇到的前端攻击及防范方法。</p>
<span id="more"></span>

<h2 id="1-XSS-攻击"><a href="#1-XSS-攻击" class="headerlink" title="1. XSS 攻击"></a>1. XSS 攻击</h2><p>参考链接：<a href="https://juejin.cn/post/7217795738691911717">React项目里我们不用担心XSS攻击吗？ - 掘金 (juejin.cn)</a></p>
<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>XSS攻击全称 跨站脚本攻击。</p>
<p>黑客往用户页面注入恶意脚本（用script标签、href属性、onload等事件回调插入脚本），但用户网站没有做任何处理，浏览器也无法判断脚本是否可信，从而让黑客修改了用户页面或者获取了cookies、session tokens等敏感的用户信息。</p>
<p>XSS攻击有两种，一种是通过修改浏览器URL导致脚本被注入到页面，另一种是通过输入框将脚本代码注入数据库。</p>
<p>另外一种详细一点的分类方式，分为三种：</p>
<ul>
<li><p><strong>反射型</strong>（服务端取出请求里的恶意代码并返回给用户了）</p>
<ul>
<li>攻击者构造特殊URL，其中包含恶意代码</li>
<li>用户请求该URL，服务端取出URL上的恶意代码，并拼接到HTML里返回</li>
<li>用户页面执行恶意代码</li>
</ul>
</li>
<li><p><strong>存储型</strong>（服务端从数据库或消息队列等存储介质中取出恶意代码返回给用户）</p>
<ul>
<li>攻击者将恶意代码提交到服务端，保存到数据库</li>
<li>用户请求页面，服务端从数据库取出恶意代码，拼接到HTML里返回</li>
<li>用户页面执行恶意代码</li>
</ul>
</li>
<li><p><strong>DOM Based型</strong>（客户端执行 js 将恶意代码插入页面，如使用不安全的API）</p>
<ul>
<li>攻击者构造特殊URL，其中包含恶意代码</li>
<li>用户请求该URL，页面 js 从URL中取出恶意代码并执行</li>
<li>（和反射型XSS类似，只是由 js 取出 query参数并插入到页面中）</li>
</ul>
</li>
</ul>
<p>还有一种分类方式，将XSS分为<strong>Client型</strong>和<strong>Server型</strong>两类。</p>
<p>Client型XSS：前端 js 代码的安全漏洞导致的用户受攻击</p>
<p>Server型XSS：由服务器将恶意代码组装到HTML。</p>
<p>反射型XSS和存储型XSS属于Server型，DOM Based XSS属于Client型。</p>
<h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ol>
<li>过滤用户的输入信息，禁止用户在输入的过程中输入 “&lt;”, “&gt;”, 引号, “$”, “_”。</li>
<li>转义html，在可能插入<code>&lt;script&gt;</code>的地方对内容进行html转义。</li>
<li>使用安全的API修改DOM。小心使用<code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code>等方法，它们很容易带来XSS攻击，使用<code>.innerText</code>、<code>.textContent</code>等方法会更安全。</li>
<li>核心的用户身份标示或token保存在Cookie中，Cookie中一定要加<strong>“HTTP Only”</strong>在结尾，保证只有在 html 操作时才能将Cookie中的内容发送出去，在 JS 中无法获得用户的Cookie信息。</li>
</ol>
<h3 id="React-如何防御-XSS"><a href="#React-如何防御-XSS" class="headerlink" title="React 如何防御 XSS"></a>React 如何防御 XSS</h3><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>jsx实际上是<code>React.createElement</code>的语法糖，每一个元素在插入html之前都要先转成下面格式的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: Symbol(&#x27;react.element&#x27;),</span><br><span class="line">  type: &#x27;h1&#x27;,</span><br><span class="line">  key: null,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children: &#x27;Hello, world!&#x27;,</span><br><span class="line">    className: &#x27;greeting&#x27;   </span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React使用<code>.textContent</code>将<code>props.children</code>作为文本插入html。（注意，不应该使用<code>.innerHTML</code>代替<code>.textContent</code>来插入内容。）</p>
<p>直接在jsx里加入<code>&lt;script&gt;</code>是不行的，它既不会执行，也不会显示。因为React是这样创建script元素的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Create the script via .innerHTML so its &quot;parser-inserted&quot; flag is</span><br><span class="line">// set to true and it does not execute</span><br><span class="line">const div = ownerDocument.createElement(&#x27;div&#x27;); // 这里的ownerDocument指document</span><br><span class="line">div.innerHTML = &#x27;&lt;script&gt;&lt;&#x27; + &#x27;/script&gt;&#x27;;</span><br><span class="line">// This is guaranteed to yield a script element.</span><br><span class="line">const firstChild = div.firstChild;</span><br><span class="line">domElement = div.removeChild(firstChild);</span><br></pre></td></tr></table></figure>

<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>主要关注React服务端生成html时做了哪些事情。转义特殊字符（” ‘ &amp; &lt; &gt;）</p>
<h4 id="dangerouslySetInnerHTML"><a href="#dangerouslySetInnerHTML" class="headerlink" title="dangerouslySetInnerHTML"></a>dangerouslySetInnerHTML</h4><p>在一些场景下，我们的确需要直接往页面插入html代码。React为我们提供<code>dangerouslySetInnerHTML</code>属性来实现这个功能，这有可能造成XSS攻击。</p>
<h2 id="2-CSRF-攻击"><a href="#2-CSRF-攻击" class="headerlink" title="2. CSRF 攻击"></a>2. CSRF 攻击</h2><p>参考链接：<a href="https://juejin.cn/post/6844904004288249870">跨站请求伪造—CSRF - 掘金 (juejin.cn)</a></p>
<h3 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h3><p>CSRF，是跨站请求伪造（Cross Site Request Forgery）的缩写，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p>
<p>通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p>
<h3 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h3><h4 id="SameSite-属性"><a href="#SameSite-属性" class="headerlink" title="SameSite 属性"></a>SameSite 属性</h4><p>Cookie 的 SameSite 属性用来限制第三方 Cookie，从而减少安全风险，可以用来防止 CSRF 攻击和用户追踪。</p>
<p>它可以设置三个值。</p>
<ul>
<li>Strict 完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie</li>
</ul>
<ul>
<li>Lax 大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外</li>
<li>None</li>
</ul>
<h4 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h4><p>在 HTTP 协议中，每一个异步请求都会携带两个 Header ，用于标记来源域名：</p>
<ul>
<li>Origin Header</li>
<li>Referer Header</li>
</ul>
<h4 id="验证Origin"><a href="#验证Origin" class="headerlink" title="验证Origin"></a>验证Origin</h4><p>如果 Origin 存在，那么直接使用 Origin 中的字段确认来源域名就可以。</p>
<h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>CSRF 攻击往往是在用户不知情的情况下成功伪造请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求，而且因为 CSRF 攻击无法获取到验证码，因此通常情况下，验证码能够很好地遏制 CSRF 攻击。</p>
<h3 id="添加-Token-验证"><a href="#添加-Token-验证" class="headerlink" title="添加 Token 验证"></a>添加 Token 验证</h3><p>要抵御 CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并且该信息不存在于 Cookie 之中。</p>
<p>可以在 HTTP 请求中以参数的形式加入一个随机产生的 Token，并在服务器端建立一个拦截器来验证这个 Token，如果请求中没有 Token 或者 Token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>
<ol>
<li>减少在 cookie 中存储客户核心内容比如用户的 token、ID、access_token 等</li>
<li>GET 请求不对数据进行修改</li>
<li>不让第三方网站访问到 Cookie</li>
<li>阻止第三方网站请求接口</li>
<li>请求时附带验证信息，比如验证码或者 Token</li>
</ol>
<h2 id="3-点击劫持"><a href="#3-点击劫持" class="headerlink" title="3. 点击劫持"></a>3. 点击劫持</h2><h3 id="攻击-2"><a href="#攻击-2" class="headerlink" title="攻击"></a>攻击</h3><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过iframe嵌入自己的网页中，并将iframe设置为透明，然后诱使用户在该页面上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。</p>
<h3 id="防范-2"><a href="#防范-2" class="headerlink" title="防范"></a>防范</h3><p>让后端解决，使用一个HTTP响应头——<code>X-Frame-Options</code>。<code>X-Frame-Options</code>可以说是为了解决点击劫持而生的，它有三个可选的值：</p>
<ol>
<li><p>DENY：浏览器会拒绝当前页面加载任何frame页面</p>
</li>
<li><p>SAMEORIGIN：frame页面的地址只能为同源域名下的页面</p>
</li>
<li><p>ALLOW-FROM origin：允许frame加载的页面地址</p>
</li>
</ol>
<h2 id="4-DDOS-攻击"><a href="#4-DDOS-攻击" class="headerlink" title="4. DDOS 攻击"></a>4. DDOS 攻击</h2><ul>
<li>攻击</li>
</ul>
<p>在短时间内发起大量请求，耗尽服务器的资源。导致服务器无法响应正常的访问，造成网站实质下线。</p>
<ul>
<li>防范</li>
</ul>
<p>前端：有一个备份网站，或者最低限度有一个临时主页。生产服务器万一下线了，可以立刻切换到备份网站，不至于毫无办法。</p>
<p>后端：HTTP 请求的拦截，恶意请求都是从某个 IP 段发出的，那么把这个 IP 段封掉就行了。或者，它们的 User Agent 字段有特征（包含某个特定的词语），那就把带有这个词语的请求拦截。</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda3</title>
    <url>/2023/06/08/Anaconda3/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>Anaconda 是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda 拥有 conda 包、环境管理器、开源库。这篇是本人使用 Anaconda 的笔记（不包含安装教程）。</p>
<span id="more"></span>

<h2 id="1-管理环境"><a href="#1-管理环境" class="headerlink" title="1. 管理环境"></a>1. 管理环境</h2><p>Windows系统，命令行模式，打开<code>Anaconda Prompt</code>。macOS 和 Linux 系统下，打开终端。</p>
<h3 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name &lt;env_name&gt; &lt;package_names&gt;</span><br></pre></td></tr></table></figure>

<p>例如，安装指定版本号的python环境 <code>conda create -n py310 python=3.10.8</code>。</p>
<p>如果要在新创建的环境中创建多个包，则直接在 <code>&lt;package_names&gt;</code> 后以<strong>空格</strong>隔开，添加多个包名即可。如： <code>conda create -n python3 python=3.9 numpy pandas</code> ，环境中安装版本为3.9的python，同时也安装了 numpy 和 pandas。</p>
<h3 id="切换环境"><a href="#切换环境" class="headerlink" title="切换环境"></a>切换环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate &lt;env_name&gt;</span><br></pre></td></tr></table></figure>

<p>例如，切换到名为pytest39的环境<code>activate pytest39</code>。</p>
<h3 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<p>亲测是会退到上一次的环境。</p>
<h3 id="显示已创建环境"><a href="#显示已创建环境" class="headerlink" title="显示已创建环境"></a>显示已创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda info -e</span><br><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure>

<p>三条任一都可以。</p>
<h3 id="复制环境"><a href="#复制环境" class="headerlink" title="复制环境"></a>复制环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name &lt;new_env_name&gt; --<span class="built_in">clone</span> &lt;copied_env_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove --name &lt;env_name&gt; --all</span><br></pre></td></tr></table></figure>

<h2 id="2-管理包"><a href="#2-管理包" class="headerlink" title="2. 管理包"></a>2. 管理包</h2><h3 id="获取当前环境中已安装的包信息"><a href="#获取当前环境中已安装的包信息" class="headerlink" title="获取当前环境中已安装的包信息"></a>获取当前环境中已安装的包信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>

<p>在命令行显示当前环境已安装包的包名及其版本号。</p>
<h3 id="在指定环境中安装包"><a href="#在指定环境中安装包" class="headerlink" title="在指定环境中安装包"></a>在指定环境中安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install --name &lt;env_name&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>在当前环境中安装包：<code>conda install &lt;package_name&gt;</code>。</p>
<h3 id="使用-pip-安装包"><a href="#使用-pip-安装包" class="headerlink" title="使用 pip 安装包"></a>使用 pip 安装包</h3><p>当使用 <code>conda install</code> 无法进行安装时，可以使用pip进行安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>pip 只是包管理器，无法对环境进行管理</strong>。因此如果想在指定环境中使用 pip 进行安装包，则需要先切换到指定环境中，再使用 pip 命令安装包。</p>
<p><strong>pip 并不将python视为包，所以无法更新python</strong>。</p>
<p>pip 可以安装一些 conda 无法安装的包；conda 也可以安装一些 pip 无法安装的包。</p>
<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda remove --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line">conda remove &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda update --all</span><br><span class="line">conda upgrade --all</span><br></pre></td></tr></table></figure>

<p>两条任一都可以。</p>
<p>更新指定包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda update &lt;package_name&gt;</span><br><span class="line">conda upgrade &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-Jupyter-Notebook"><a href="#3-Jupyter-Notebook" class="headerlink" title="3. Jupyter Notebook"></a>3. Jupyter Notebook</h2><p>Jupyter Notebook 是一种 Web 应用程序，能让用户开发，记录、执行代码和展示结果。可通过安装Anaconda来启动Jupyter Notebook。（换一种说法，Jupyter Notebook 是包含在了 Anaconda 里面的。）</p>
<h3 id="启动-Jupyter-Notebook"><a href="#启动-Jupyter-Notebook" class="headerlink" title="启动 Jupyter Notebook"></a>启动 Jupyter Notebook</h3><h4 id="启动-Jupyter-Notebook-的方法"><a href="#启动-Jupyter-Notebook-的方法" class="headerlink" title="启动 Jupyter Notebook 的方法"></a>启动 Jupyter Notebook 的方法</h4><ul>
<li>在 Anaconda Navigator 的 Home 界面，选择 Jupyter Notebook 启动。</li>
<li>在终端中输入 jupyter notebook。启动成功后，终端不能关闭，关闭就会断开与本地服务器的链接，Jupyter Notebook 也将无法使用。</li>
</ul>
<h4 id="修改默认的工作目录"><a href="#修改默认的工作目录" class="headerlink" title="修改默认的工作目录"></a>修改默认的工作目录</h4><p>启动 Jupyter Notebook 会发现文件在 C 盘用户目录下。为了将其挪到 D 盘，需要进行以下步骤：</p>
<h4 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h4><p>命令行输入下面的命令，生成配置文件，文件位置是在 C 盘用户目录下<code>./.jupyter/jupyter_notebook_config.py</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>找到上面的配置文件<code>jupyter_notebook_config.py</code>并打开，用搜索工具找到包含<code>c.NotebookApp.notebook_dir</code>的这一行，样子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># c.NotebookApp.notebook_dir = &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>将<code>&#39;&#39;</code>替换为目标路径，如<code>&#39;D:\\Mycodes\\myJupyter&#39;</code>。（windows 下是双斜杠<code>\\</code>，Linux 下是<code>/</code>。）最后去掉注释，让配置生效，样子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.notebook_dir = <span class="string">&#x27;D:\\Mycodes\\myJupyter&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：要新建好该路径下的文件夹，确保 Jupyter Notebook 能找到这个目标文件夹，然后再启动。否则会报错<code>Bad config encountered during initialization: No such notebook dir: ...</code>。</p>
<h4 id="重新启动-Jupyter-Notebook"><a href="#重新启动-Jupyter-Notebook" class="headerlink" title="重新启动 Jupyter Notebook"></a>重新启动 Jupyter Notebook</h4><p>在终端中输入 Jupyter Notebook，启动。</p>
<blockquote>
<p>关闭之后重启可能会再次进入默认路径，需要在开始菜单找到“Jupyte Notebook”快捷键，鼠标右击 -&gt; 更多 -&gt; 打开文件位置，找到快捷方式下的“目标”，去掉后面的 “%USERPROFILE%&#x2F;“，然后点击“确定”，最后重新启动 Jupyte Notebook。</p>
</blockquote>
<p>浏览器地址栏中默认地将会显示：<code>http://localhost:8888</code>。其中，“localhost”指的是本机，“8888”则是端口号。</p>
<p>如果想自定义端口号来启动Jupyter Notebook，在终端中输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --port &lt;port_number&gt;</span><br><span class="line">如：</span><br><span class="line">jupyter notebook --port 8080</span><br></pre></td></tr></table></figure>



<h3 id="使用-Jupyter-Notebook"><a href="#使用-Jupyter-Notebook" class="headerlink" title="使用 Jupyter Notebook"></a>使用 Jupyter Notebook</h3><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>Jupyter Notebook 的组成部分：</p>
<ol>
<li>网页应用：基于<strong>网页形式</strong>，结合其他富媒体形式的工具。</li>
<li>文档：所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入输出，都是以文档的形式体现的。这些文档是<strong>后缀名为<code>.ipynb</code>的<code>JSON</code>格式文件</strong>，可导出为HTML、LaTeX、PDF等格式。</li>
</ol>
<p>Jupyter Notebook 的特点：</p>
<ol>
<li>编程的<strong>语法高亮、tab补全、缩进</strong></li>
<li>直接通过浏览器<strong>运行代码</strong>并在代码块下方<strong>展示运行结果</strong></li>
<li>以<strong>富媒体</strong>格式<strong>展示计算结果</strong>，格式包括：HTML，LaTeX，PNG，SVG等</li>
<li>对代码编写说明文档或语句，支持<strong>Markdown语法</strong></li>
<li>支持使用LaTeX编写<strong>数学性说明</strong></li>
</ol>
<h4 id="页面介绍"><a href="#页面介绍" class="headerlink" title="页面介绍"></a>页面介绍</h4><p>启动后，浏览器进入 Notebook 的主界面。</p>
<p>页面包括：<code>File, Running, Clusters</code>。管理conda环境和包、添加扩展功能后会增加页面：<code>Conda, Nbextensions</code>。</p>
<ul>
<li>Files页面用于管理和创建文件相关的类目。<ul>
<li>对于现有的文件，可以通过<strong>勾选文件</strong>的方式，对选中文件进行复制、重命名、移动、下载、查看、编辑和删除的操作。</li>
<li>根据需要，在“New”下拉列表中选择想要创建文件的环境，进行创建“ipynb”格式的笔记本、“txt”格式的文档、终端或文件夹。</li>
</ul>
</li>
</ul>
<h4 id="笔记本的操作"><a href="#笔记本的操作" class="headerlink" title="笔记本的操作"></a>笔记本的操作</h4><p>在“New”下拉列表中，选择“Notebook”栏的内核。然后会进入笔记本界面。</p>
<p>点击文件名称，可以重命名。</p>
<p>在代码块输入代码，按<code>Ctrl + enter</code>会运行代码并在下方展示结果&#x2F;将Markdown语法编辑文本转换为视觉效果。</p>
<p>按<code>enter</code>键，将Markdown视觉效果切换为编辑效果。</p>
<p>按<code>A</code>键（Above）会在选定 Cell 的上方新增 Cell，按<code>B</code>键（Below）会在选定 Cell 的下方新增 Cell。</p>
<p>可以切换，选择当前 Cell 为代码&#x2F;Markdown&#x2F;原生NBConvert。</p>
<p>连按两次<code>D</code>键（Delete）会删除当前 Cell。</p>
<p>按<code>Z</code>键会撤回删除操作。</p>
<h4 id="添加Markdown生成目录的功能"><a href="#添加Markdown生成目录的功能" class="headerlink" title="添加Markdown生成目录的功能"></a>添加Markdown生成目录的功能</h4><p>通过安装扩展来实现目录的添加。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge jupyter_nbextensions_configurator</span><br><span class="line">conda install -c conda-forge jupyter_contrib_nbextensions</span><br><span class="line">jupyter contrib nbextension install --user</span><br><span class="line">jupyter nbextensions_configurator <span class="built_in">enable</span> --user</span><br></pre></td></tr></table></figure>

<p>jupyter_contrib_nbextensions是真正意义上的插件库。</p>
<p>jupyter_nbextensions_configurator是notebook用来配置插件的插件。</p>
<p>执行上述命令后，启动Jupyter Notebook，你会发现导航栏多了“Nbextensions”的类目，点击“Nbextensions”，勾选“Table of Contents ⑵”。</p>
<p>如果发现目录页空白，解决办法是按住鼠标拖动一下左侧目录。应该是本身的一个小bug。</p>
<h4 id="更换-Jupyter-主题"><a href="#更换-Jupyter-主题" class="headerlink" title="更换 Jupyter 主题"></a>更换 Jupyter 主题</h4><p>使用 pip 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyterthemes</span><br></pre></td></tr></table></figure>

<p>查看和更改样式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jt -l <span class="comment">#查看样式列表</span></span><br><span class="line">jt -t 主题名 <span class="comment">#更换主题</span></span><br></pre></td></tr></table></figure>

<p>例如，<code>jt -t onedork -f roboto -fs 14 -nfs 14 -tfs 14 -ofs 11</code>，<code>jt -t oceans16 -f fira -nf robotosans -tf robotosans -N -T -cellw 60% -dfs 9 -ofs 9</code>。</p>
<p>-f(字体) -fs(字体大小) -cellw(占屏比或宽度) -ofs(输出段的字号) -T(显示工具栏) -N(显示自己主机名)。</p>
<p>预览样式参考链接：<a href="https://www.cnblogs.com/shanger/p/12006161.html">Jupyter Notebook 更换主题（背景、字体） - 赏尔 - 博客园 (cnblogs.com)</a></p>
<p>但感觉还是不大好看…</p>
<h4 id="在VSCode中使用-Jupyter"><a href="#在VSCode中使用-Jupyter" class="headerlink" title="在VSCode中使用 Jupyter"></a>在VSCode中使用 Jupyter</h4><p><code>jupyter</code>插件已经并入<code>python</code>插件中了，所以安装了<code>python</code>插件就可以使用了。</p>
<p>使用方法也很简单，创建<code>.ipynb</code>文件，就可以编辑notebook了。</p>
<blockquote>
<p>说到这里，了解一下<code>ipynb</code>的意思，这个格式的文件是使用 Jupyter Notebook 来编写 Python 程序时的文件，而Jupyter Notebook 之前叫作 IPython Notebook（IPython 是一个 Python 的交互式 shell，包含供 Jupyter notebook 使用的Jupyter内核）。</p>
<p>anaconda<code>自带</code>ipython。</p>
</blockquote>
<p>用 VSCode 的话，编辑器界面就会好看一些。</p>
]]></content>
      <categories>
        <category>使用工具</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
